[{"title":"高等数学A(下)期末复习","date":"2018-06-20T06:33:06.000Z","path":"2018/06/20/advancedmathsfinalreview/","text":"高数试题考点简要分析多元函数微分学 全微分 $dz=\\frac{\\partial z}{\\partial x}dx+\\frac{\\partial z}{\\partial y}dy$ 例题：12-13-3 二(1) 填空题考法:给出全微分求参数 例题：12-13-3 一(6) 复合函数求微分 隐函数求微分 例题：P31 例4.9(三种方法) 方程组确定隐函数: P33 例4.10 空间曲线的切线与法平面 切向量:$\\alpha = \\lbrace x’(t_0),y’(t_0),z’(t_0)\\rbrace$ 切线:$\\frac{x-x_0}{x’(t_0)}=\\frac{y-y_0}{y’(t_0)}=\\frac{z-z_0}{z’(t_0)}$ 法平面:$x’(t_0)(x-x_0)+y’(t_0)(y-y_0)+z’(t_0)(z-z_0)=0$ 例题：P43 例6.3 空间曲面的切平面与法线 法向量:$n=\\lbrace F_x(x_0,y_0,z_0),F_y(x_0,y_0,z_0),F_z(x_0,y_0,z_0) \\rbrace$ 切平面: $\\textbf{n}\\cdot(x-x_0,y-y_0,z-z_0)=0$ 法线: $\\frac{x-x_0}{F_x(x_0,y_0,z_0)}=\\frac{y-y_0}{F_y(x_0,y_0,z_0)}=\\frac{z-z_0}{F_z(x_0,y_0,z_0)}$ 梯度$\\textbf{grad}f(x_0,y_0)=\\nabla f(x_0,y_0)=\\lbrace f_x(x_0,y_0),f_y(x_0,y_0)\\rbrace$ 方向导数 $\\frac{\\partial z}{\\partial l}|_{M_0}=f_x(x_0,y_0)cos\\alpha + f_y(x_0,y_0)cos\\beta = \\nabla f(x_0,y_0)\\cdot l_0$ 例题：课本P39 例5.2 积分 第一型曲面积分(今年很有可能考，一代二换三投影) 二重三重积分(8分) 第二型曲线积分 (12分) 常规算法 Green公式算法 第二型曲面积分(8分) 一代：将曲面$\\sum$的方程代入被积函数 二投：将曲面$\\sum$投影到坐标平面 三定号：由曲面侧确定正负号 四换域：改变积分域，曲面$\\sum$变为投影域 例题 P140 例2.3 Green公式: $\\oint_{\\partial D^+} Pdx+Qdy = \\iint_D(\\frac{\\partial Q}{\\partial x}-\\frac{\\partial P}{\\partial y})dxdy$ 高斯公式 格林公式：平面区域二重积分与区域边界第二型曲线 高斯公式：空间区域三重积分与边界曲面第二型曲面 注意点 如果$\\sum$不是闭曲面，则需要补充曲面使之封闭，最后不要忘了减去 如果$P,Q,R$在某点没有定义，则可以将$\\sum$方程带入被积函数消去影响 散度 (4分) $divF(M) = \\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z}$ Stokes公式 : 第二型曲线与第二型曲面变换 旋度 (和散度连起来4分) P169页 级数 常见级数 等比级数 $\\sum_{n=0}^{\\infty}aq^n$又称为几何级数 $|q|&lt;1$时 收敛, $S=\\frac{a}{1-q}$ $|q|\\geq 1$时 发散. $p$级数 $\\sum_{n=1}^{\\infty} \\frac{1}{n^p}$ $p\\leq 1$时 发散 $p&gt;1$时 收敛 $p=1$时,$\\sum_{n=1}^{\\infty} \\frac{1}{n}$称为调和级数 幂级数 $\\sum_{n=0}^{\\infty}c_nz^n=c_0+c_1z+\\cdots+c_nz^n+\\cdots$ 收敛性(必考) 三种情况见P230 （12分左右,含缺项幂级数） 收敛半径$$R=\\begin{cases}\\frac{1}{\\rho} &amp; 0&lt;\\rho&lt;\\infty\\newline\\infty &amp; \\rho = 0\\newline0 &amp; \\rho = \\infty\\end{cases}$$ 当幂级数为实幂级数时, 收敛圆变为区间$(-R,R)$,称为 收敛区间. 求和函数并求数项级数和(8分) 建议p233-235熟练掌握 注意求导完积分时,从0开始积，取值定C 函数展开为幂级数(8-10分) 牢记P239 幂级数展开不允许有负次幂 Laurent级数 (8分) P248 例3.2 P249 习题2 Fourier级数 (4分) 缺项幂级数 : 只含奇次幂或偶次幂的幂级数，直接采用比值判别法 条件收敛、绝对收敛 $\\sum_{n=1}^{\\infty}|u_n|$收敛则称级数$\\sum_{n=1}^{\\infty}u_n$绝对收敛(按模) $\\sum_{n=1}^{\\infty}|u_n|$发散,而级数$\\sum_{n=1}^{\\infty}u_n$收敛,则称其条件收敛。 反常积分判敛法 可参考P214-P216的推论，虽然没考过但包老师毒奶有可能考，还是看一下吧 建议掌握$\\Gamma$函数： $$\\Gamma(x)=\\begin{cases}\\int_{0}^{+\\infty}e^{-t}t^{x-1}dt &amp; x&gt;0,\\newline\\frac{\\Gamma(x+1)}{x} &amp; x&lt;0,x\\neq -1,-2,\\cdots\\end{cases}\\Gamma(\\frac{1}{2})=\\sqrt{\\pi} , \\quad\\Gamma(1)=1$$ 孤立奇点与留数 孤立奇点 可去奇点：Laurent展开中无负幂次 m级极点：Laurent展开式中有有限项负幂次 $f(z)$在$z_0$处解析,那么$z_0$为$f(z)$的m级零点充要条件是：$f^{(n)}(z_0)=0 (n=0,1,2,\\cdots,m-1),f^{(m)}(z_0)\\neq 0$ $z_0$为$f(z)$的$m$级极点$\\Leftrightarrow z_0$为$\\frac{1}{f(z)}$的m级零点。 本性奇点：有无穷多负幂项 求$f(z)$奇点和类型方法： 首先求出所有奇点接着求$\\lim_{z\\to z_0}f(z)$,若该值为复常数则为可去奇点若该值不存在且不为无穷，则为本性奇点若该值为无穷，则：对于每个奇点,验证$\\frac{1}{f^{(m)}(z)}\\neq 0$每一个奇点求出的m即为该奇点的m级极点。对于无穷型点性态，考虑$z=\\frac{1}{t}$带入后同上。 留数 如果$z_0$为$f(z)$的m级极点，那么$Res[f(z),z_0]=\\frac{1}{(m-1)!}\\lim_{z\\to z_0}[(z-z_0)^mf(z)]^{(m-1)}$ 千万不要忘了定义法:将$f(z)$在$z_0$的去心邻域内的Laurent展开式的负一次幂系数$c_{-1}$ 若$f(z)=\\frac{P(z)}{Q(z)},P(z),Q(z)均在z_0解析,且P(z_0)\\neq 0,Q(z_0)=0,Q’(z_0)\\neq 0$,则$Res[\\frac{P(z)}{Q(z)},z_0]=\\frac{P(z_0)}{Q’(z_0)}$ 留数定理：$\\oint_L f(z)dz = 2\\pi i \\sum_{k=1}{n}Res[f(z),z_k]$ 资料合集$\\quad$高等数学全册概念(张曙整理)高等数学重要例题(冉雨杭整理)$\\quad$11-16高数上期末题目11-16高数上期末答案$\\quad$12-17高数下期末题目12-17高数下期末答案$\\quad$12-17高数下期中题目12-17高数下期中答案$\\quad$高等数学全册答案","tags":[{"name":"期末复习","slug":"期末复习","permalink":"http://www.zjdx1998.ml/tags/期末复习/"},{"name":"高等数学","slug":"高等数学","permalink":"http://www.zjdx1998.ml/tags/高等数学/"}]},{"title":"离散数学期末复习","date":"2018-06-05T02:57:16.000Z","path":"2018/06/05/discretemathfinalreview/","text":"考试结构 10道选择题(含多选,但答案不超过两个)20分3道证明题来自于集合论和代数结构（重难点) 数理逻辑 命题逻辑的基本概念命题与联结词命题(Proposition) 概念：具有唯一真值的陈述句 唯一性：或真或假但不能两者都是的 命题所用符号：常用小写２６个英文字母 经典例子 $x=3$ × 我现在说假话 × （悖论) 请不要吸烟! ×(祈使句) 这朵花真美丽啊！ （感叹句) 悖论:既不能为真，也不能为假的陈述句称作 悖论。 注 命题是陈述句，陈述句不一定是命题命题有唯一真值，但真值可能受范围、时空、环境、判断标准、认识程度限制，一时无法确定 命题分类 简单命题：不能被分解成更简单的命题 复合命题：简单命题+联结词(Connective) 联结词(Connective) 否定联结词(Negation Connective) 符号¬,读作“非”，“否定” 定义：命题 p p的否定式：复合命题“p的否定”（“非p”） 符号：$\\neg$ p (符号$\\neg$称作否定联结词) $\\neg$ p为真当且仅当p为假 例子 今天没有天晴 $\\neg$p：今天天晴 合取联结词(Conjunctive Connective) 符号$\\wedge$,读作“合取” 定义：命题 p，q p与q的合取式：复合命题“p并且q” 符号： $p \\wedge q$ (符号$\\wedge$称作合取联结词) p$\\wedge$q为真当且仅当p和q同时为真 例子 王华的成绩很好并且品德很好 $p \\wedge q$p：王华的成绩很好q：王华的品德很好 析取联结词(Disjunctive Connective) 符号$\\lor$,读作“析取” 定义：命题 p，q p与q的析取式：复合命题“p或q” 符号：$p \\lor q$(符号$\\lor$称作析取联结词) p$\\lor$q为假当且仅当p和q同时为假 例子 小李是学数学或者计算机科学p$\\lor$qp：小李是学数学q：小李是学计算机科学 析取联结词 排斥或 符号 $\\oplus$ 定义：命题 p，q 符号：p$\\oplus$q 等价于(p$\\wedge\\neg$q)$\\lor$($\\neg p\\wedge q$) p$\\oplus$q为假当且仅当p和q同时为假或同时为真 例子： 小李在教室看书或在图书馆上网 小李在看书或者听音乐 蕴涵联结词(Implication Connective) 符号$\\to$,读作“如果…则…”、“蕴涵” 定义：命题 p，q p与q的蕴涵式：复合命题“如果p，则q” 符号：$p \\to q$(符号$\\to$称作蕴涵联结词) $p \\to q$为假当且仅当p为真，q为假 例子 如果天下雨，那么地下湿 $p \\to q$ p：天下雨 , q：地下湿 注 q是p的必要条件 p为假，$p \\to q$永远为真 给定命题$p \\to q$ 它的逆命题$q \\to p$ 它的反命题$\\neg p\\to\\neg q$ 它的逆反命题 $\\neg q \\to\\neg p$ 各种命题关系 $ p \\to q \\Leftrightarrow \\neg q\\to \\neg p$ $ q \\to p \\Leftrightarrow \\neg p\\to \\neg q$ 等价联结词(Equivalence Connective) 符号$\\leftrightarrow$,读作“当且仅当” 定义：命题 p，q p与q的等价式：复合命题“p当且仅当q” 符号：$p \\leftrightarrow q$(符号称作等价联结词) $p \\leftrightarrow q$为真当且仅当p与q真值相同 例子 当且仅当2+3=5，才有2是素数 $p \\leftrightarrow q$ p： 2+3=5 , q： 2是素数 优先级 联结词：$\\neg \\wedge \\lor \\to \\leftrightarrow$ 同括号最优先 同一优先级：从左到右 例子：求于命题$\\neg p\\lor q\\to r$含义相同的是$ ((\\neg p)\\lor q)\\to q $ table th:first-of-type { width: 100px; } p q $p \\wedge q$ $p \\lor q$ $p \\oplus q$ $p \\to q$ $p \\leftrightarrow q$ F F F F F T T F T F T T F F T F F T T T F T T T T F T T 命题公式及其赋值命题公式 命题常项(Propositional Constant)：简单命题 命题变项(Propositional Variable)：表示命题的变量 真值可以变化的陈述句 命题变项不是命题 命题变项用确定命题代入才能确定真值 命题所用符号：常用小写２６个英文字母 命题变量不同于代数式的变量 如：x+y&gt;4的x，y不是命题变量 合式公式（命题公式）(Statement Formula)的递归定义： 单个命题常项或命题变项是合式公式（原子命题公式） A为合式公式，则$\\neg A$是合式公式 A , B为合式公式,则（$A \\wedge B$），（ $A \\lor B$），（$A \\to B$）,（$A \\leftrightarrow B$）为合式公式 有限次应用1-3形成的符号串为合式公式 子公式B：给定合式公式A B是A的一部分 B是合式公式 符号说明 大写字母A，B表示合式公式 公式简写法则： 公式最外层括号可以省略*（$\\neg$ A）的括号可以省略 根据运算符优先级省略括号 省略括号不能影响公式解释 公式层次(Level) 若公式A是单个的命题变元，则称A为0层合式 称公式A是$n+1(n≥0)$层公式是指下面情况之一： A＝ ¬B，B是n层公式 A＝$B \\wedge C$，其中B，C分别为i层和j层公式，且n＝max(i,j) A＝$B ∨ C$ ，其中B，C的层次及n同(b) A＝$B \\to C$ ，其中B，C的层次及n同(b) A＝$B ↔ C$ ，其中B，C的层次及n同(b) 若公式A的层次为k，则称A是k层公式 注:层次≠联结词数 命题公式的赋值 设$p_1,p_2,\\cdots,p_n$是出现在公式$A$中的全部命题变项，给$p_1,p_2,\\cdots,p_n$各指定一个真值，称为对$A$的一个 赋值或 解释 。使$A$为1的一组值称为 成真赋值 , 使$A$为0的一组值称为 成假赋值 。 将命题公式A在所有赋值下取值情况列成表，称作A的真值表。构造方式： 找出A中命题变项：$p_1,p_2,\\cdots,p_n$ 列出$2^n$个赋值（2进制加法形式） 从低到高写成公式各个层次 各个赋值：计算各层的真值 设A为任一命题公式 重言式(永真式)(Tautology)：v(A)=T，对任意v 矛盾式(永假式)(Contradiction) ：v(A)=F，对任意v 可满足式(Satisfiable) ：v(A)=T，对某个v 关系 重言式是可满足式，反之不一定成立 真值表判断 重言式：真值表最后一列全为T 矛盾式：真值表最后一列全为F 可满足式：真值表最后一列至少一个T 考试要点 主要内容 命题、真值、简单命题与复合命题、命题符号化联结词及复合命题符号化命题公式及层次公式的类型真值表及应用 基本要求 深刻理解各联结词的逻辑关系, 熟练地将命题符号化会求复合命题的真值深刻理解合式公式及重言式、矛盾式、可满足式等熟练地求公式的真值表，并用它求公式的成真赋值与成假赋值及判断公式类型 命题逻辑等值演算 主要内容： 等值式与基本的等值式 等值演算与置换规则 析取范式与合取范式，主析取范式与主合取范式 联结词完备集(本次不作要求) 本章与其他各章的联系 是第一章的抽象与延伸 是后续各章的先行准备 等值式 定义:若等价式$A \\leftrightarrow B$是重言式，则称A与B等值，记作$A \\Leftrightarrow B$，并称$A \\Leftrightarrow B$是等值式(Equivalent Expression) 说明 定义中，A, B, $\\Leftrightarrow$均为元语言符号 A或B中可能有哑元出现.例如，在($p \\to q$) $ \\Leftrightarrow $ (($\\neg p \\lor q$)$ \\lor $ ($\\neg r\\wedge r$))中，r为左边公式的哑元. 哑元：设公式A，B共含有命题变项$p_1,p_2,\\cdots,p_n$，而A或者B不全含这些命题变项，比如A中不含$p_i，p_{(i+1)}$等等，那么这些命题就是公式A的哑元。 用真值表可验证两个公式是否等值 命题 设A是一个命题公式，含有命题变项$p_1 , p_2 ,\\cdots,p_n$，又设$A_1，A_2，…，A_n$是任意的命题公式. 对每个i（$i=1,2,\\cdots,n$），把$p_i$在A中的所有出现都替换成$A_i$，所得到的新命题公式记作B. 那么，如果A是重言式，则B也是重言式. 等值式模式 双重否定律 $A \\Leftrightarrow \\neg\\neg A$ 幂等律 $A \\Leftrightarrow A \\lor A , A\\Leftrightarrow A \\wedge A $ 交换律 $A \\wedge B \\Leftrightarrow B \\wedge A , A \\lor B \\Leftrightarrow B \\lor A$ 结合律 $(A \\lor B) \\lor C\\Leftrightarrow A \\lor (B \\lor C) (A \\wedge B) \\wedge C\\Leftrightarrow A \\wedge (B \\wedge C)$ 分配律 $ (A \\lor B) \\wedge C\\Leftrightarrow (A \\wedge C) \\lor (B \\wedge C)\\qquad(A \\wedge B) \\lor C\\Leftrightarrow (A \\lor C) \\wedge (B \\lor C)$ 德摩根律 $\\neg(A \\lor B) \\Leftrightarrow \\neg A\\wedge\\neg B , \\neg(A \\wedge B) \\Leftrightarrow \\neg A\\lor\\neg B$ 吸收律 $A \\lor (A \\wedge B) \\Leftrightarrow A , A \\wedge (A \\lor B) \\Leftrightarrow A$ 零律 $A \\lor 1 \\Leftrightarrow 1 , A \\wedge 0 \\Leftrightarrow 0$ 同一律 $A \\lor 0 \\Leftrightarrow A , A \\wedge 1 \\Leftrightarrow A$ 排中律 $A \\lor\\neg A \\Leftrightarrow 1$ 矛盾律 $A \\wedge\\neg A \\Leftrightarrow 0$ 蕴含等值式 $A \\to B \\Leftrightarrow \\neg A \\lor B$ 等价等值式 $A \\leftrightarrow B \\Leftrightarrow (A \\to B)\\wedge(B \\to A)$ 假言易位 $A \\to B \\Leftrightarrow \\neg B \\to \\neg A$ 等价否定等值律 $A \\leftrightarrow B \\Leftrightarrow \\neg A \\leftrightarrow \\neg B$ 归谬论 $(A \\to B)\\wedge(A \\to \\neg B)\\Leftrightarrow\\neg A$ 等值演算(Equivalent Calculation)：由已知的等值式推演出另外一些等值式的过程 置换规则(Replacement Rule)：设φ(A)是含公式A的命题公式， φ(B)是用公式B置换了φ(A)中所有A后得到的命题公式，若$A \\Leftrightarrow B$ ，则$φ(A) \\Leftrightarrow φ(B)$ 说明： 等值演算过程中遵循的重要规则 一个命题公式A，经多次置换，所得到的新公式与原公式等价 析取范式与合取范式 析取式、合取式定义 文字(literal): 命题变项及其否定 简单析取式(Simple Disjunction):仅由有限个文字构成的析取式 简单合取式(Simple Conjunction):仅由有限个文字构成的合取式 定理: 1)一个简单析取式是永真式当且仅当它同时含某个命题变元及它的否定式2)一个简单合取式是永假式当且仅当它同时含某个命题变元及它的否定式 定义 析取范式(Disjunctive Normal Form):由有限个简单合取式构成的析取式 合取范式(Conjunctive Normal Form):由有限个简单析取式构成的合取式 析取范式与合取范式统称为范式(Normal Form) 定理 $A_i$ 简单合取式, $A_1 \\lor \\cdots \\lor A_n \\Leftrightarrow F$ 当且仅当 $A_i \\Leftrightarrow F$，对任意$A_i$$A_i$ 简单析取式, $A_1 \\wedge \\cdots \\wedge A_n \\Leftrightarrow T$ 当且仅当 $A_i \\Leftrightarrow T$，对任意$A_i$ 范式存在定理: 任意命题公式都存在着与之等值的析取范式与合取范式 方法： 步骤一：消去“$\\to$”、“$\\leftrightarrow$”联结词 步骤二：消去双重否定符，内移否定符（双重否定律、德摩根律） 步骤三：使用分配律 极小项 Miniterm (极大项 Maxterm):含有n个命题变项的简单合取式 (简单析取式)，并满足 每个命题变元和它的否定式不同时出现，而二者之一必出现且仅出现一次 第i个命题变项或它的否定式出现在从左算起的第i位上(若无角标，则按字典顺序排列) 若有ｎ个命题变项，则有$2^n$个极小项（极大项）如果我们把不带否定符的命题变项取成1，带否定符的命题变项取成0，那么每一个极小项都对应一个二进制数，因而也对应一个十进制数极小项的编码:对应成真赋值,如 $p \\wedge q \\wedge r$对应$TTT , m_7$极大项的编码:对应成假赋值,如 $\\neg p \\lor \\neg q \\lor \\neg r$对应$TTT , M_7$ 定理:设$m_i$和$M_i$是命题变元$p_1 , p_2 ,\\cdots,p_n$形成的极小项和极大项,则: $m_i \\wedge m_j \\Leftrightarrow F (i \\neq j)$(一个赋值不可能使两个均为真) $M_i \\lor M_j \\Leftrightarrow T (i \\neq j) $（一个赋值不可能使两个均为假） $\\neg m_i \\Leftrightarrow M_i , \\neg M_i \\Leftrightarrow m_i$ 主范式 主析取范式 Principal Disjunctive Normal Form ：由n个命题变项构成的析取范式中所有的简单合取式都是极小项 主合取范式 Principal Conjunctive Normal Form : 由n个命题变项构成的合取范式中所有的简单析取式都是极大项 定理: 任何命题公式都存在着与其等值的主析取范式和主合取范式，并且是唯一的。 一个公式的主析取范式即为令此公式的真值为T的指派所对应的极小项的析取。 一个命题公式的真值表是唯一的，因此一个命题公式的主析取范式也是唯一的 任何一个命题公式都可求得它的主合取范式 一个命题公式的主合取范式是唯一的 在真值表中，令命题公式的真值为“F”的指派就对应其主合取范式的一个极大项 重言式的主合取范式不含任何极大项，为1. 矛盾式的主析取范式不含任何极小项, 为0. 主析（合）取范式的用途讨论： 求公式的成真与成假赋值 判断公式类型 判断两个命题公式是否等值 应用主析（合）取范式分析和解决实际问题 联结词的完备集 “与非”联结词： 符号 $ \\uparrow $ ($p \\uparrow q$)读作：“p与q的否定” $p \\uparrow q \\Leftrightarrow \\neg (p \\wedge q)$ “或非”联结词： 符号：“↓” ($p \\downarrow q$)读作：“p或q的否定” ($p \\downarrow q) \\Leftrightarrow \\neg(p \\lor q) $ 真值函数F(Truth Function): {$0,1$}$^n \\to${$0,1$} 联结词完备集S(Complete Set of Connectives): S是一个联结词集合 每一个真值函数都可以由仅含S中的联结词构成的公式表示 定理: $S =\\lbrace\\neg,\\wedge,\\lor\\rbrace$是联结词完备集推论: $S =\\lbrace\\wedge,\\neg \\rbrace$是联结词完备集$S = \\lbrace\\uparrow\\rbrace , \\lbrace\\downarrow\\rbrace$是联结词完备集。 考试要点 主要内容 等值式与等值演算 基本等值式（16组，24个公式） 主析取范式与主合取范式 联结词完备集 具体要求 深刻理解等值式的概念 牢记基本等值式的名称及它们的内容 熟练地应用基本等值式及置换规则进行等值演算 理解文字、简单析取式、简单合取式、析取范式、合取范式的概念 深刻理解极小项、极大项的概念、名称及下角标与成真、成假赋值的关系 熟练掌握求主范式的方法（等值演算、真值表等） 会用主范式求公式的成真赋值、成假赋值、判断公式的类型、判断两个公式是否等值 会将公式等值地化成指定联结词完备集中的公式 会用命题逻辑的概念及运算解决简单的应用问题 解决实际应用问题步骤 设简单命题并符号化 用复合命题描述各条件 写出由复合命题组成的合取式 将合取式化成主范式 求成真赋值, 并做出解释和结论 命题逻辑的推理理论 主要内容 推理的形式结构 自然推理系统P 本章与其他各章的联系 本章是第五章的特殊情况和先行准备 推理的形式结构 推理 (Inference) —— 从前提出发推出结论的思维过程 证明 (Proof) —— 描述推理正确或错误的过程 推理的形式结构 前提：$A_1,\\cdots,A_k$ 结论：$B$ 推理的形式结构： $A_1\\wedge\\cdots\\wedge A_k \\to B$ 设$\\Gamma = \\lbrace A_1,\\cdots,A_k\\rbrace $, 则记前提$\\Gamma$推出$B$的推理为$\\Gamma\\vdash B$为推理的形式结构。 当推理正确，则记为$\\Gamma\\models B$ 逻辑(语义)蕴涵(Logical Entailment)：给定$A_1,\\cdots,A_k$和B 对任意赋值v: 如果$v(A_i)=T$,则$v(B)=T$ 或者存在$A_j$，使得$v(A_j)=F$ 称由前提$A_1,\\cdots,A_k$ 推出结论B的推理是有效的 符号：$\\lbrace A_1,\\cdots,A_k\\rbrace$ $ \\models B$ 注意: 推理正确不能保证结论一定正确 定理 $\\lbrace A_1,\\cdots,A_k\\rbrace$ $\\models B$ 当且仅当 $A_1\\wedge\\cdots\\wedge A_k \\to B$ 为重言式 蕴涵元符号: $\\Rightarrow$ $A_1,\\cdots,A_k \\Rightarrow B$ 代表$\\lbrace A_1,\\cdots,A_k\\rbrace$ $\\models B$ 推理定律 序号 公式 名称 1 $A\\Rightarrow(A \\lor B)$ 附加律 2 $(A \\wedge B) \\Rightarrow A$ 化简律 3 $(A \\to B)\\wedge A \\Rightarrow B$ 假言推理 4 $(A \\to B)\\wedge \\neg B \\Rightarrow \\neg A$ 拒取式 5 $(A \\lor B)\\wedge\\neg B \\Rightarrow A$ 析取三段论 6 $(A \\to B)\\wedge(B \\to C)\\Rightarrow(A \\to C)$ 假言三段论 7 $(A \\leftrightarrow B)\\wedge(B \\leftrightarrow C)\\Rightarrow(A \\leftrightarrow C)$ 等价三段论 8.1 $(A \\to B)\\wedge(C \\to D)\\wedge(A \\lor C)\\Rightarrow(B \\lor D)$ 构造性二难 8.2 $(A \\to B)\\wedge(\\neg A \\to B) \\Rightarrow B$ 构造性二难（特殊） 9 $(A \\to B)\\wedge(C \\to D)\\wedge(\\neg B \\lor \\neg D)\\Rightarrow(\\neg A \\lor \\neg C)$ 破坏性二难 自然推理系统P 自然演绎推理：从一组已知为真的事实出发，直接运用经典逻辑推理规则推出结论的过程 一个形式系统 I (Formal System) 由下面四个部分组成：(1) 非空的字母表，记作 A(I).(2) A(I) 中符号构造的合式公式集，记作 E(I).(3) E(I) 中一些特殊的公式组成的公理集，记作 $A_X(I)$.(4) 推理规则集，记作 R(I). 记$I=&lt;A(I),E(I),A_X(I),R(I)&gt;$, 其中$&lt;A(I),E(I)&gt;$是 I 的 形式语言系统, $&lt;A_X(I),R(I)&gt;$ 是 $I$ 的形式演算系统. 自然推理系统 P (Natural Deduction System)定义如下: 字母表(1) 命题变项符号：$p, q, r, …, p_i, q_i, r_i,\\cdots$(2) 联结词符号：$\\neg,\\wedge,\\lor,\\to,\\leftrightarrow$(3) 括号与逗号：(, ), ， 合式公式 推理规则(1) 前提引入规则(2) 结论引入规则(3) 置换规则(4) 9条推理定律和结论引入可得（4）~（12） 构造证明方法 附加前提证明法 $(A_1,\\cdots,A_k) \\to (A \\to B)$ 转化为 $A_1,A_2,\\cdots,A_k,A\\vdash B$ 归谬法 $(A_1\\wedge\\cdots\\wedge A_k) \\to B$ 转化为 $(A_1\\wedge\\cdots\\wedge A_k)\\wedge\\neg B$为矛盾式 考试要点 主要内容 推理的形式结构 判断推理是否正确的方法 真值表法 等值演算法 主析取范式法 推理定律 自然推理系统P 构造推理证明的方法直接证明法 附加前提证明法 归谬法(反证法) 基本要求 理解并记住推理形式结构的两种形式： $A_1\\wedge\\cdots\\wedge A_k \\to B$ 前提：$A_1,\\cdots,A_k$结论：$B$ 熟练掌握判断推理是否正确的不同方法（如真值表法、等值演算法、主析取范式法等） 牢记 P 系统中各条推理规则 熟练掌握构造证明的直接证明法、附加前提证明法和归谬法 会解决实际中的简单推理问题 一阶逻辑基本概念 本章的主要内容 一阶逻辑命题符号化 一阶逻辑公式、解释及分类 本章与其他章的联系 克服命题逻辑的局限性 是第五章的先行准备 一阶逻辑命题符号化 命题逻辑的表示能力缺陷 命题演算的基本单元为简单命题 不能研究命题的结构、成分和内部逻辑的特征 不能表达二个原子命题所具有的共同特征，无法处理一些简单又常见的推理 个体词（Individual Term）：研究对象中独立存在的具体或抽象的个体 个体常项：具体或特定的个体词 南京，东南大学，1，2 个体变项：抽象或泛指的个体词 x,y,z 取值范围称为个体域或论域 空集不能作为论域 全总个体域：宇宙间一切事物 谓词（Predicate）：刻画个体词性质及个体词之间的关系的词 谓词常项：具体性质或关系的谓词 F(a,b)：小王和小李是同学 G(x)：x是有理数 谓词变项：抽象或泛指的性质或关系的谓词 L(x,y)：x,y具有关系L n元谓词$P(x_1,…,x_n)$ $P(x_1,…,x_n)$: $D^n \\to \\lbrace F,T\\rbrace$，D为个体域 不带个体变项的谓词为0元谓词。当为谓词常项时， 0元谓词即命题 量词（Quantifier）：表示个体常项或变项之间数量关系的词 全称量词$\\forall$（ Universal Quantifier ）： $\\forall x$表示个体域里的所有个体x 对应日常语言中的“一切的”、“所有的”等一元谓词F(x)个体域为D， $\\forall xF(x)$真值$\\forall xF(x)$为真：$F(a)$为真，对所有$a \\in D$$\\forall xF(x)$为假：$F(a)$为假，对某个$a \\in D$$\\forall x\\forall yG(x,y)$：个体域里所有个体x,y有关系G$\\forall x\\forall yG(x,y)$为真：G(a,b)为真，对所有$a,b \\in D$$\\forall x\\forall yG(x,y)$为假：G(a,b)为假，对某对$a,b \\in D$ 存在量词$\\exists$（Existential Quantifier ）： $\\exists x$表示个体域里有一个个体x 对应日常语言中的“存在”、“有一个”等一元谓词F(x)个体域为D， $\\exists xF(x)$真值$\\exists xF(x)$为真：F(a)为真，存在某个$a \\in D$$\\exists xF(x)$为假：F(a)为假，对任意$a \\in D$$\\exists x\\exists yG(x,y)$：个体域里存在个体x,y有关系G 全称量词与存在量词联合 $\\forall x\\exists yG(x,y)$：个体域里任意x,存在个体y, x, y有关系G $\\exists x\\forall yG(x,y)$：个体域里存在x和所有个体y都有关系G $\\forall xF(x), \\exists xF(x), F(x)$的联系、区别 $F(x)$是不能确定真值的谓词 $\\forall xF(x), \\exists xF(x)$都是命题 x称为约束变元 谓词逻辑符号化几点说明 不同的个体域，符号化形式可能不一样，命题真值也可能不同 一般默认是全总个体域，即包含一切个体 特性谓词：描述个体变元取值范围的谓词 全称量化中，特性谓词常作为蕴涵式的前件$\\forall x(M(x) \\to F(x))$ 存在量化中，特性谓词常作为合取项之一$\\exists x(M(x) \\wedge F(x))$ 根据命题的实际意义选取全称量词或存在量词 多个量词同时出现时，不能随意颠倒顺序 一阶逻辑公式及其解释 一阶谓词语言ℒ（ First-order Predicate Language）的字母表（ Alphabet） 非逻辑符号 个体常项符号 函数符号 谓词符号 逻辑符号 个体变项符号 量词符号 联结词符号 括号与逗号 一阶谓词语言ℒ的项（Term）： 个体常项符号和个体变项符号是项 若$f(x_1,…,x_n)$是n元函数符号，$t_1,…,t_n$是n个项，则$f(t_1,…,t_n)$是项 有限次使用以上两项生成的符号串才是项 一阶谓词语言ℒ的原子公式（Atomic Formula）： $F(x_1,…,x_n)$为n元谓词符号$t1,…,tn$为n个项$F(t_1,…,t_n)$为ℒ的原子公式 一阶谓词语言ℒ的合式公式(谓词公式)(Predicate Formula)： 原子公式是合式公式 A为合式公式，则$\\neg A$是合式公式 A，B为合式公式,则$(A\\wedge B), (A \\lor B), (A \\to B), (A \\leftrightarrow B)$为合式公式 如A是合式公式，则$\\forall xA, \\exists xA$也是合式公式 只有有限次应用1-4构成的符号串才是合式公式 一张图解释$个体词\\xrightarrow{ 函数 }项\\xrightarrow{ 谓词 }原子公式\\xrightarrow{ 联结词和量词 }合式公式$ 辖域(Scope)：紧接在量词后面括号内的合式公式 自由变元与指导变元 指导变元(Guide Variable)：出现在量词辖域内的变元x 自由变元(Free Variable) ：非约束出现的变元 闭式(封闭公式)(Closed Formula)：不含自由出现的个体变项的公式 如何赋予合式公式含义？ 定义域函数变项需要指定具体函数谓词变项需要指定具体谓词 解释（Explanation）：非逻辑符号集L生成的一阶语言ℒ，ℒ的解释I由4部分组成 非空个体域$D_I$ I将任意一个个体常项符号$a \\in L$映射到$D_I$上的个体$a*$ I将任意一个n元函数$f \\in L$映射到$D_I$上的n元函数$f*: (D_I)^n \\to D_I$ I将任意一个n元谓词$F \\in L$映射到$D_I$上的n元关系$R_F$ $I$下的赋值$\\sigma$: 对每一个个体变项符号$x$指定$D_I$中的一个值$\\sigma(x)$设公式$A$, 规定：在解释$I$和赋值$\\sigma$下 取个体域$D_I$ 若$A$中含个体常项符号$a$就把它替换成$\\overline a$ 若$A$中含函数符号$f$就把它替换成$\\overline f$ 若$A$中含谓词符号$F$就把它替换成$\\overline F$ 若$A$中含自由出现的个体变项符号$x$就将它替换成$\\sigma(x)$这样得到的公式记为$A’$,称为$A$在$I$下的解释。 合式公式分类：公式A 重言式(永真式)（Tautology）：A在任意的解释下为真 矛盾式(永假式)（Contradiction）：A在任意的解释下为假 可满足式（Satisfiable）： A在某个解释下为真 设$A_0$是含命题变项$p_1,p_2,\\cdots,p_n$的命题公式，$A_1,A_2,\\cdots,A_n$是n个谓词公式，用$A_i(1&lt;=i&lt;=n)$处处代替$A_0$中的$p_i$,所得公式$A$称为$A_0$的代换实例(Substitution Instance) 如$F(x) \\to G(x),\\forall xF(x) \\to \\exists yG(y)$都是$p \\to q$的代换实例。 重言式的代换实例都是永真式，矛盾式的代换实例都是永假式 考试要点 主要内容 个体词、谓词、量词 一阶逻辑命题符号化 一阶语言L 项、原子公式、合式公式 公式的解释 量词的辖域、指导变元、个体变项的自由出现与约束出现、闭式、解释 公式的类型 永真式(逻辑有效式)、矛盾式(永假式)、可满足式 基本要求 准确地将给定命题符号化 理解一阶语言的概念 深刻理解一阶语言的解释 熟练地给出公式的解释 深刻理解永真式、矛盾式、可满足式的概念, 会判断简单公式的类型 等值演算与推理 本章的主要内容 一阶逻辑等值式与基本的等值式 置换规则、换名规则、代替规则 前束范式 一阶逻辑推理理论 本章与其他各章的关系 本章的先行基础是前四章 本章是集合论各章的先行基础 等值式与置换规则 等值式(Equivalence)：公式A,B的等价式$A \\leftrightarrow B$为永真式，记作$A \\Leftrightarrow B$. 称$A \\Leftrightarrow B$是等值式。 第一类等值式：命题逻辑的重言式的代换实例(重言式的代换实例都是永真式) 第二类等值式： 消去量词等值式设个体域为有限集$D=\\lbrace a_1,a_2,\\cdots,a_n \\rbrace$,则有(1) $\\forall xA(x)\\Leftrightarrow A(a_1)\\wedge A(a_2)\\wedge\\cdots\\wedge A(a_n)$(2) $\\exists xA(x)\\Leftrightarrow A(a_1)\\lor A(a_2)\\lor\\cdots\\lor A(a_n)$ 量词否定等值式设公式$A(x)$含有自由出现的个体变项$x$,则(1) $\\neg\\forall xA(x)\\Leftrightarrow\\exists x\\neg A(x)$(2) $\\neg\\exists xA(x)\\Leftrightarrow\\forall x\\neg A(x)$ 量词辖域收缩与扩张等值式x在公式A(x)中自由出现，但不在B中自由出现$$\\begin{split} \\forall x(A(x) \\lor B) &amp;\\Leftrightarrow \\forall xA(x) \\lor B \\newline \\forall x(A(x) \\wedge B) &amp;\\Leftrightarrow \\forall xA(x) \\wedge B \\newline \\forall x(A(x) \\to B) &amp;\\Leftrightarrow \\exists xA(x) \\to B \\newline \\forall x(B \\to A(x)) &amp;\\Leftrightarrow B \\to \\forall xA(x) \\newline \\exists x(A(x) \\lor B) &amp;\\Leftrightarrow \\exists xA(x) \\lor B \\newline \\exists x(A(x) \\wedge B) &amp;\\Leftrightarrow \\exists xA(x) \\wedge B \\newline \\exists x(A(x) \\to B) &amp;\\Leftrightarrow \\forall xA(x) \\to B \\newline \\exists x(B \\to A(x)) &amp;\\Leftrightarrow B \\to \\exists xA(x)\\end{split}$$ 量词分配等值式x在公式A(x)和B(x)中自由出现(1) $\\forall x(A(x)\\wedge B(x))\\Leftrightarrow \\forall xA(x) \\wedge \\forall xB(x)$(2) $\\exists x(A(x)\\lor B(x))\\Leftrightarrow \\exists xA(x) \\lor \\exists xB(x)$(3) $\\exists x(A(x)\\to B(x))\\Leftrightarrow \\forall xA(x) \\to \\exists xB(x)$注意:全称量词对析取无分配律，存在量词对合取无分配律 即以下等值式不成立(x在公式A(x)和B(x)中自由出现) $\\forall x(A(x)\\lor B(x))\\Leftrightarrow \\forall xA(x) \\lor \\forall xB(x)$ 提示：任意实数，或者是有理数或者是无理数，或者任意实数是有理数，或者任意实数是无理数 $\\exists x(A(x)\\wedge B(x))\\Leftrightarrow \\exists xA(x) \\wedge \\exists xB(x)$ 提示：存在实数，既是有理数又是无理数;存在实数是有理数，并且存在实数是无理数 规则 置换规则 设$\\Phi(A)$是含公式$A$的公式, $\\Phi(B)$是用公式$B$取代$\\Phi(A)$中所有的A之后所得到的公式，那么，若$A \\Leftrightarrow B$ 则 $\\Phi(A) \\Leftrightarrow \\Phi(B)$ 一阶逻辑中的置换规则与命题逻辑中的置换规则形式上完全相同，只是在这里$A,B$是一阶逻辑公式。 换名规则 设$\\Phi(A)$为一公式, 将A中某量词辖域中的一个约束变项的所有出现及相应的指导变元全部改成该量词辖域中未曾出现过的某个个体变项符号，公式中其余部分不变，将所得公式记作$A’$,则$A’ \\Leftrightarrow A$. 一阶前束范式 前束范式(Prenex Normal)：一阶逻辑公式满足 量词都出现在公式最前面 量词的辖域一直延伸到公式末 形如$Q_1x_1Q_2x_2 \\cdots Q_kx_k B$ Q为$\\exists$或$\\forall$，B不含量词 前束范式存在定理：一阶逻辑任何公式都存在等值的前束范式 将公式中的联接词$\\to、\\leftrightarrow$换为$\\wedge,\\lor,\\neg$ 利用量词否定等值式把深入到原子公式前 利用换名规则或代替规则 利用量词辖域的扩张收缩律把量词移到全式的最前面 注意哪些既约束出现又自由出现的个体变项. 在求前束范式时，要通过换名消去既约束出现又自由出现的个体变项。 一阶逻辑的推理理论 推理定律除命题逻辑中的11个推理规则外，还有4个消去、引入量词规则: 全称量词消去规则(简记为$\\forall -$)$\\forall xA(x) \\Rightarrow A(y)$ 全称量词引入规则(简记为$\\forall +$)$A(y) \\Rightarrow \\forall xA(x)$ 存在量词消去规则(简记为$\\exists -$)$(\\exists xA(x))\\wedge (A(y) \\to B) \\Rightarrow B$或$A(y)\\to B \\Rightarrow \\exists xA(x)\\to B$ 存在量词引入规则(简记为$\\exists +$)$A(y) \\Rightarrow \\exists xA(x)$ 或 $B \\to A(y) \\Rightarrow B \\to \\exists xA(x)$ 集合论 本部分的主要内容 集合代数—-集合的概念和基本运算 关系—-二元关系的表示、运算、性质、特殊的关系 函数—-函数定义、性质、运算 集合的基数—-集合的等势、集合的基数 本部分的基本要求 掌握集合及其相关的基本概念 熟练掌握集合以及关系、函数的基本运算 了解和使用基本的证明方法 集合代数 主要内容 集合的基本概念—-属于、包含、幂集、空集、文氏图等 集合的基本运算—-并、交、补、差等 集合恒等式—-集合运算的算律、恒等式的证明方法 与后面各章的关系 : 是集合论后面各章的基础 集合的基本概念 集合是能作为整体论述的事物的集体，又称为类、族、搜集 组成集合的每个事物叫做这个集合的元素或成员。用符号$\\in$表示某个元素属于某个集合，$\\notin$表示不属于 任意元素，对于某一集合而言 ，或属于该集合，或者不属于，二者必居其一，不可兼得。这也符合命题演算中，命题要么是真，要么是假的二值逻辑 有限集合的元素的个数称为该集合的基数或势,记为$|A|$。 外延公理：两个集合A和B相等，即A=B，当且仅当他们有相同的成员（也就是，A的每一元素是B的一个元素而B的每一个元素也是A的一个元素）。 用逻辑符号表达是： $A=B \\Leftrightarrow \\forall x(x \\in A \\leftrightarrow x \\in B)$ 集合间的包含关系、相等、子集、真子集、空集 本章中讨论的集合和元素都是限于某一论述域的。我们记该论述域为$E$，又称为全集合。 含有n个元素的集合简称n元集，它的含有$m$个$(m≤n)$元素的子集称为它的m元子集。 幂集合 定义：由集合$A$的所有子集（包括空集及A本身）所组成的集合叫做A的幂集。 记以 $P(A)$,即 $P(A) ={B|B \\subseteq A}$ 一个给定集合的幂集是唯一的 设A为一个有限集，A的基数为$|A|$，则$P(A)$的基数$|P(A)|=2|A|$ 集合的运算与集合恒等式 定义 A和B的并记为$A∪B$ , 是集合 $A∪B={x|x∈A∨ x∈B}$ A和B的交记为$A∩B$ , 是集合 $A∩B={x|x∈A∧x∈B}$ A和B的差，或B关于A的 相对补，记为$A－B$,是集合 $A－B ={x|x∈A∧x \\notin B}$ 设A，B是两集合，集合$(A-B)∪(B-A)$称为集合A，B的 对称差，记作$A \\bigoplus B$。即$A \\bigoplus B={x \\bigoplus (x \\bigoplus A∧x \\bigoplus B)∨(x \\bigoplus B∧x \\bigoplus A)}$ $A \\bigoplus B =(A∪B)-(A∩B)$ 设E是论述域而A是E的子集。A的（绝对）补，记为～A，是集合$～A＝E－A＝{x|x∈E∧x \\notin A}={x \\notin A}$ 设$A$为集合, $A$的元素的元素构成的集合称作$A$的 广义并,记作$\\cup A$,符号化表示为$\\cup A = \\lbrace x|\\exists z(z\\in A \\wedge x\\in z)\\rbrace$ 设$A$为 非空集合(否则无意义), $A$的所有元素的公共元素构成的集合称作$A$的广义交,记作$\\cap A$,符号化表示为$\\cap A = \\lbrace x|\\forall z(z\\in A \\to x\\in z)\\rbrace$ 称广义并、广义交、幂集、绝对补运算为一类运算，并、交、相对补、对称差运算为二类运算. 一类运算优先于二类运算. 一类运算之间由右向左顺序进行. 二类运算之间由括号决定先后顺序. 有穷集的计数 文氏图(Venn Diagrams)：利用图来图解全集的各子集的关系的图，称为文氏图。 （1）全集合E用一个大矩形表示 （2）设A是E的一个子集，A用圆形表示 （3）通常在图中画有阴影的区域表示新组成的集合 包含排斥定理(容斥原理): $|\\overline{A_1} \\cap \\overline{A_2} \\cap \\cdots \\cap \\overline{A_n}|=|S|-\\sum_{i=1}^{n}|A_i|+\\cdots+{(-1)}^n|A_1 \\cap A_2 \\cap\\cdots\\cap A_n|$ 欧拉函数(了解) 欧拉函数$\\phi$是数论中的一个重要函数，设$n \\in N_+ ,\\phi(n)$表示$\\lbrace 0,1,\\cdots,n-1\\rbrace$中与$n$互素的数的个数. $\\phi(n) =n\\sum_{i=1}^{k}(1-\\frac{1}{p_i})$ 集合恒等式 名称 公式 幂等律 $A \\cup A = A$ $A \\cap A = A$ 结合律 $(A \\cup B)\\cup C = A \\cup (B \\cup C)$ $(A \\cap B)\\cap C = A \\cap (B \\cap C)$ 交换律 $A \\cup B = B \\cup A$ $A \\cap B = B \\cap A$ 分配律 $A \\cup (B \\cap C) = (A \\cup B)\\cap(A \\cup C)$ $A \\cap (B \\cup C) = (A \\cap B)\\cup(A \\cap C)$ 同一律 $A \\cup \\emptyset = A$ $A \\cap E = A$ 零律 $A \\cup E = E$ $A \\cap \\emptyset = \\emptyset$ 排中律 $A \\cup $~$A = E$ 矛盾律 $A \\cap $~$A = \\emptyset$ 吸收律 $A \\cup(A \\cap B) = A$ $A \\cap(A \\cup B) = A$ 德摩根律 $A-(B \\cup C)=(A-B)\\cap(A-C)$ $A-(B \\cap C)=(A-B)\\cup(A-C)$ ~$(B \\cup C) = $ ~$B \\cap $~$C$ ~$(B \\cap C) = $ ~$B \\cup $~$C$ ~$\\emptyset = E$ ~$E = \\emptyset$ 双重否定律 ~~$A=A$ 二元关系 主要内容 有序对与笛卡儿积 二元关系的定义与表示法 关系的运算 关系的性质 关系的闭包 等价关系与划分 偏序关系 本章与后面各章的关系 是函数的基础 是图论的基础 有序对与笛卡儿积 有序对（序偶）：由两个元素$x,y$(允许x=y)按给定顺序排列组成的二元组合 符号化：$&lt;x,y&gt;$ x为第一元素，y为第二元素 笛卡尔积A×B：集合A中元素为第一元素，集合B中元素为第二元素的有序对集$A×B={&lt;x，y&gt;|x \\in A \\wedge y \\in B}$ 如A，B均是有限集，$|A|=m,|B|=n$,则必有$|A \\times B|=mn$ 笛卡儿积性质 对于任意集合A，$A \\times \\emptyset = \\emptyset，\\emptyset \\times A=\\emptyset$ 一般不满足交换律，当$A\\neq\\emptyset \\wedge B\\neq\\emptyset \\wedge A \\neq B时，A \\times B \\neq B \\times A$ 一般不满足结合律，即当A，B，C均非空时，$(A \\times B) \\times C \\neq A \\times (B \\times C)$ 对任意三个集合A，B，C有 （1）$A\\times(B∪C)=(A \\times B) ∪(A \\times C)$ （2）$A\\times(B∩C)=(A \\times B)∩(A \\times C)$ （3）$(B∪C)\\times A=(B\\times A) ∪(C \\times A)$ （4）$(B∩C)\\times A=(B \\times A)∩(C \\times A)$ （5）$A \\subseteq C \\wedge B \\subseteq D \\Leftrightarrow A×B \\subseteq C×D$ 二元关系 关系是指事物之间（个体之间）的相互联系 二元关系R：满足下列条件之一的集合 集合非空，且它的元素都是有序对 集合为空集 $A,B$是集合，$A \\times B$的子集叫做从A到B的一个二元关系 特殊的二元关系 全域关系$E_A＝A \\times A$ 恒等关系$I_A＝{&lt;x，x&gt;|x∈A}$ 空关系$\\emptyset$ 小于等于关系 $L_A = \\lbrace&lt;x,y&gt;|x,y \\in A,x&lt;=y$ 整除关系 $D_A = \\lbrace&lt;x,y&gt;|x,y \\in A,x|y$ 包含关系 $R_\\subseteq=\\lbrace&lt;x,y&gt;|x,y \\in A,x \\subseteq y$ 给出一个关系的方法有3种：集合表达式、关系矩阵和关系图。 设$A=\\lbrace x_1,x_2,\\cdots,x_n \\rbrace$, $R$是$A$上的关系，令 $$ r_{ij}= \\begin{cases} 1 &amp; 若x_i R x_j \\newline 0 &amp; 若x_i \\not R x_j \\end{cases} $$ 关系图，直接由关系矩阵作图即可。 关系的运算 设R是二元关系 R中所有有序对的第一元素构成的集合称作$R$的$定义域$,记作$domR$,形式化表示为$domR=\\lbrace x|\\exists y (&lt;x,y&gt; \\in R)\\rbrace$ R中所有有序对的第二元素构成的集合称作$R$的$定义域$,记作$ranR$,形式化表示为$ranR=\\lbrace y|\\exists x (&lt;x,y&gt; \\in R)\\rbrace$ R的定义域和值域的并集称作R的域，记作$fldR$,形式化表示为$fldR=domR \\cup ranR$ 设R为二元关系，R的逆关系，简称为R的逆，记作$R^{-1}$,其中$R^{-1}=\\lbrace&lt;x,y&gt;|&lt;y,x&gt; \\in R\\rbrace$ 设$F,G$为二元关系，G对F的 右复合记作$F \\circ G$,其中$F \\circ G=\\lbrace&lt;x,y&gt;|\\exists t(&lt;x,t&gt; \\in F\\wedge&lt;t,y&gt;\\in G$ 设$R$为二元关系，A是集合, R在A上的 限制 记作$R \\upharpoonright A=\\lbrace&lt;x,y&gt;|xRy \\wedge x \\in A\\rbrace$ A在R下的 像 记作$R[A]$,其中$R[A]=ran(R \\upharpoonright A)$ 优先顺序： 逆运算优先于其他运算 关系运算优先于集合运算 没有规定优先权的运算以括号决定运算顺序 设F是任意的关系，则 $(F^{-1})^{-1} = F$ $domF^{-1}=ranF,ranF^{-1}=domF$ 设$F,G,H$是任意的关系，则 $(F \\circ G) \\circ H = F \\circ (G \\circ H)$ $(F \\circ G)^{-1}=G^{-1} \\circ F^{-1}$ 设$R$为$A$上的关系,则$R \\circ I_A = I_A \\circ R = R$ $R \\circ (S∪T)=R \\circ S∪R \\circ T$ $R \\circ (S∩T) \\subseteq R \\circ S∩R \\circ T$ $(S∪T) \\circ X=S \\circ X∪T \\circ X$ $(S∩T) \\circ X \\subseteq S \\circ X∩T \\circ X$ 设$R$为关系,$A,B$为集合，则 $R↾(A∪B) = R↾A∪R↾B$ $R[A∪B] = R[A]∪R[B]$ $R↾(A∩B) = R↾A∩R↾B$ $R[A∩B] \\subseteq R[A]∩R[B]$ 设$R$为$A$上的关系，n为自然数，则R的n次幂定义为 $R^0=\\lbrace&lt;x,x&gt;|x \\in A\\rbrace=I_A$ $R^{n+1}=R^n \\circ R$ 定理: 设R是集合A上的关系，$m,n∈N$ $R^m \\circ R^n=R^{m+n}$ $(R^m)^n=R^{mn}$ 证明思路：使用归纳法并利用复合关系的结合律 定理：设A为n元集，R是A上的关系，则存在自然数$s$和$t$，使得$R^s=R^t$ 关系的性质 若$\\forall x(x \\in A \\to &lt;x,x&gt; \\in R)$，则称$R$在$A$上是 自反的。 若$\\forall x(x \\in A \\to &lt;x,x&gt; \\notin R)$,则称$R$在$A$上是 反自反的。 关系矩阵的特点？自反关系的关系矩阵的对角元素均为1反自反关系的关系矩阵的对角元素均为0 关系图的特点？自反关系的关系图中每个顶点都有环反自反关系的关系图中每个顶点都没有环 定理：R是A上的关系，则：R是自反关系的充要条件是$I_A \\subseteq R$R是反自反关系的充要条件是$R∩IA=Ф$ 若$\\forall x\\forall y(x,y \\in A \\wedge &lt;x,y&gt; \\in R \\to &lt;y,x&gt; \\to R$,则称$R$为$A$上 对称的关系。 关系矩阵特点？对称关系的关系矩阵是对称矩阵 关系图特点？如果两个顶点之间有边，一定是一对方向相反的边（无单边） 定理： R在A上对称当且仅当$R=R^{-1}$ 若$\\forall x\\forall y(x,y \\in A \\wedge &lt;x,y&gt; \\in R \\wedge &lt;y,x&gt; \\in R \\to x=y$,则称$R$为$A$上 反对称的关系。 反对称关系矩阵和关系图特点？若$r_{ij}=1$，且$i≠j$， 则$r_{ji}=0$ 如果两个顶点之间有边，一定是一条有向边（无双向边） 定理： R在A上反对称当且仅当$R∩R{-1} \\subseteq IA$ 设$R$为A上的关系，若$\\forall x\\forall y\\forall z(x,y,z\\in A \\wedge &lt;x,y&gt;\\in R\\wedge &lt;y,z&gt; \\in R \\to &lt;x,z&gt; \\in R$,则称$R$为$A$上 传递的关系。 传递关系关系图特点？如果结点a能通过有向弧组成的有向路径通向结点x,则a必须有有向弧直接指向x,否则R就不是传递的 定理：R在A上传递当且仅当$R \\circ R \\subseteq R$ 关系的闭包 定义：R是非空集合A上的关系,若A上另外有一个关系R’满足如下三条： $R’$是自反的(对称的，传递的） $R \\subseteq R’$ A上任何一个满足以上两条的关系$R”$，均有$R’ \\subseteq R”$称关系R’为R的自反(对称,传递)闭包,记作$r(R) (s(R),t(R))$ R’是在R的基础上添加有序对 添加元素的目的是使R’具有自反性(对称性,传递性) 添加后使之具有自反性(对称性,传递性)的所有关系中R’是最小的一个 定理 $r(R)=R \\cup R^0$ $s(R)=R \\cup R^{-1}$ $t(R)=R \\cup R^2 \\cup \\cdots$ 给定关系$R，r(R)，s(R)，t(R)$的关系矩阵分别为$M , M_r , M_s , M_t$,那么： $Mr=M+E$ $Ms=M+M$ $Mt=M+M2+M3+…$ 关系图分别为$G，G_r，G_s，G_t$，那么： 考察G的每个顶点，如果没有环就加上一个环，最终得到的是Gr 考察G的每一条边，如果有一条从$x_i到x_j$的单向边，则在G中加一条$x_j到x_i$的反方向边，最终得到$G_s$ 考察G的每个顶点$xi$,找出从$x_i$出发的所有2步，3步，…，n步长的路径。设路径的终点为$x_{j1},x_{j2},…,x_{jk}$。如果没有从$x_i$到$x_{jl}$的边，就加上这条边，最终得到$G_t$ 定理：设A是一集合，R是A上的二元关系，则有： R是自反的当且仅当$r(R)＝R$ R是对称的当且仅当$s(R)＝R$ R是可传递的当且仅当$t(R)＝R$ 定理：设A是集合，R1和R2是A上的二元关系，$R1 \\subseteq R2$，则有： $r(R1) \\subseteq r(R2)$ $s(R1) \\subseteq s(R2)$ $t(R1) \\subseteq t(R2)$ 定理：设X是一集合，R是X上的二元关系，则有： 若R是自反的，则$s(R),t(R)$也自反 若R是对称的，则$r(R),t(R)$也对称 若R是可传递的，则$r(R)$也可传递 等价关系与划分 若非空集合A上的关系R, 满足自反、对称、可传递，则称R为A上的 等价关系。即若$&lt;x,y&gt; \\in R$,称$x$等价于$y$,记作$x$~$y$. 设$R$为非空集合$A$上的等价关系，$\\forall x \\in A$,令$[x]_R = \\lbrace y|y \\in A \\wedge xRy\\rbrace$ ,称为x关于R的等价类,简称为x的等价类。简记为$[x]$或$\\overline{x}$ 等价类$[x]_R$是一个集合，$[x]_R \\subseteq A ([x]R$是A的子集) $[x]_R$中的元素是在A中，所有与x具有等价关系R的元素所组成的集合 在等价关系中的关系图中，一个最大连通子图中的点就是一个等价类 定理 设A是一个集合，R是A上的等价关系，$xRy$当且仅当$[x]=[y]$ 设A是一个集合，R是A上的等价关系，对于所有$x,y∈A$，或者$[x]=[y]$，或者$[x]∩[y]=Ø$ 设R是集合A上的等价关系，则$A=∪{[x]|x \\in A}$ 设$R$为非空集合$A$上的等价关系,以$R$的所有等价类作为元素的集合称为$A$关于$R$的 商集，记作$A/R$，即：$A/R=\\lbrace[x]_R|x \\in A\\rbrace$ 设$A$为非空集合,若$A$的子集族$\\pi(\\pi\\subseteq P(A)$,是A的子集构成的集合）满足下列条件: $\\emptyset\\notin\\pi$ $\\forall x\\forall y(x,y\\in\\pi\\wedge x\\neq y \\to x\\cap y = \\emptyset$ $\\cup\\pi = A$则称$\\pi$是$A$的一个 划分,称$\\pi$中的元素为$A$的划分块。 等价关系与划分有一一对应关系 划分到等价关系转化：A是一非空集合，S是A的一个划分，下述关系必定是一个等价关系$R={&lt;x,y&gt; | x, y\\in A \\wedge x,y在S的同一划分}$ 等价关系到划分的转化：设A是非空集合，R是A上的等价关系。R的商集是A的划分 偏序关系 次序在现实生活中常见： 小于，包含等 研究序理论的动机： 研究一般次序关系 推导出一般序关系的性质 这些关系可以应用于所有特定的序关系 设$R$为非空集合A上的关系。如果$R$是自反、 反 对称和传递的,则称R为A上的 偏序关系。记作$≼$，设$≼$ 为偏序关系,如果$&lt;x,y&gt;\\in≼$,则记作$x≼y$，读作”x小于等于y” 设$≼$为非空集合$A$上的偏序关系，定义 $\\forall x,y\\in A,x&lt;y\\Leftrightarrow x≼y\\wedge x\\neq y$ $\\forall x,y\\in A,x与y可比\\Leftrightarrow x≼y\\lor y≼x$ 设$R$为非空集合$A$上的偏序关系，如果$\\forall x,y\\in A,x,y$均可比，则称$R$为A上的全序关系（线序关系） 集合$A$和$A$上的偏序关系$≼$一起称作 偏序集，记作$&lt;A,≼&gt;$ 设$&lt;A,≼&gt;$为偏序集，$\\forall x,y\\in A$,如果$x&lt;y$且不存在$z\\in A$使得$x&lt;z&lt;y$，则称$y$覆盖$x$. 哈斯图思路 哈斯图思路： 所有结点的自回路均省略 省略所有弧上的箭头,适当排列A中元素的位置,如$a≼b$,则a画在b的下方 如$a≼b,b≼c$,则必有$a≼c$, a到b有边, b到c有边,则a到c的无向弧省略 条件2，3等于说如果b覆盖a,则画一条从a到b的弧线，否则不画 最小(大)元：设$&lt;A, ≼&gt;$是偏序集,集合$B \\subseteq A$ 最大元$b∈B$：$\\forall a∈B$,均有$a≼b$ 最小元$b∈B$：$\\forall a∈B$,均有$b≼a$ 如果A的子集B存在最大(小)元素,则最大(小)元素是唯一的 最大(小)元可能不存在 极大(小)元：设$&lt;A, ≼&gt;$是偏序集,$B \\subseteq A$ 极大元$b∈B$：$\\forall a∈B,如b≼a,则a＝b$ 不存在$a∈B$，$b≺a$ 极小元$b∈B$：$\\forall a∈B,如a≼b,则a＝b$ 不存在$a∈B$，$a≺b$ 说明 极大元未必是最大元 极大元未必是唯一的 如果B是有限集,则B必存在极大元 最大元就是极大元 上(下)界：设$&lt;A, ≼&gt;$是偏序集, $B \\subseteq A, a∈A$ B的上界a：对每个$b∈B,有b≼a$ B的下界a：对每个$b∈B,有a≼b$ 上下界不一定唯一 上(下)确界：设$&lt;A, ≼&gt;$是偏序集, $B \\subseteq A$ 最小上界：$C=\\lbrace b|b为B的上界\\rbrace$的最小元 最大下界：$D=\\lbrace b|b为B的下界\\rbrace$的最大元 说明 B的最小元一定是B的下界，同时也是B的最大下界；B的最大元一定是B的上界，同时也是B的最小上界 最小上界或最大下界可能不存在 若存在最小上界或最大下界，是唯一的 拓扑排序：给定一个非空有限的偏序集合$&lt;A,≼’&gt;$，构造出一个全序集合$&lt;A, ≼&gt;$ ，使得每当$a≼’b$有$a≼b$，方法如下： 选取A的极小元a，使a是&lt;A, ≼&gt;列表表示中的第一个元素 对子集$A-{a}$重复这一过程，每次一个新的极小元素被找到，它在$&lt;A,≼&gt;$的列表表示中成为下一个元素 重复这一过程，直到A的元素被抽完 考试要点 有序对：由两个元素x，y按给定顺序排列组成的二元组合 笛卡儿积：集合A中元素为第一元素，集合B中元素为第二元素的有序对集 二元关系R：满足下列条件之一的集合：集合非空，且它的元素都是有序对集合为空集 从A到B的关系：A，B是集合，A×B的任何子集所定义的二元关系 A上的关系：A=B空关系，全域关系，恒等关系，包含关系 关系的表示法：集合表达式、关系矩阵、关系图 关系的八种运算 关系运算的五种性质 关系的三种闭包 A上的等价关系 商集 等价类 划分 A上的偏序关系和偏序集基本要求 熟练掌握关系的三种表示法能够判定关系的性质，以及等价关系、偏序关系掌握含有关系运算的集合等式掌握等价关系、等价类、商集、划分、哈斯图、偏序集等概念计算$A \\times B, dom R, ranR, fldR, R^{-1}, R \\circ S , R^n , r(R), s(R), t(R)$求等价类和商集A/R给定A的划分$\\pi$，求出$\\pi$所对应的等价关系求偏序集中的极大元、极小元、最大元、最小元、上界、下界、上确界、下确界掌握基本的证明方法证明涉及关系运算的集合等式证明关系的性质、证明关系是等价关系或偏序关系 函数函数的定义与性质 $B^A$求法 $B^A=\\lbrace f|f:A\\to B\\rbrace$ $A=\\lbrace 1, 2, 3\\rbrace, B=\\lbrace a,b \\rbrace$，求$B^A$(PPT_Chapter 8 Page8) 函数的像、完全原像概念（课本P146） 单满双射概念(课本P147) -&gt; 判断函数类型 例8.4 (1)(2)(5) 例8.5 (1)(2)(6)(7) 构造双射函数 例8.6 (1) 常用函数(课本P150) 常函数 恒等函数 单调函数 特征函数(PPT_Chapter 8 Page18) 自然映射(PPT_Chapter 8 Page20) 函数的复合与反函数 会求函数的复合函数$F \\circ G$(PPT_Chapter 8 Page25) 复合函数的单满双射性质（课本P153） 逆函数（反函数）必须是双射函数 双射函数与集合的基数 等势(存在从A到B的双射函数) 会判断两个集合是否等势（课本P156-159）、 具有自反、对称、传递性。 康托定理：(1) $N\\not\\approx R$ (2) 对任意集合A都有$A\\not\\approx P(A)$ 优势（存在A到B的单势函数，则称B优势于A,记作$A≼·B$）、真优势 性质：自反性、传递性 $A≼·B \\wedge B≼·A \\to A\\approx B$ 自然数集合(课本P162) 空集和后继$n^+$定义而来 三歧性 有穷集当且仅当它与某个自然数集等势，否则称为无穷集。 基数 对于有穷集合A，称与A等势的那个唯一自然数为A的基数,记作$cardA$或(|A|) 即$card A = n \\Leftrightarrow n$ 基数即为集合中不同元素的个数 自然数集合$N$的基数记作$ℵ_0$(阿列夫零) 实数集$R$的基数记作$ℵ$（阿列夫) 会求集合基数（课本P163) 可数集($cardA≤ℵ_0$) 如$\\lbrace a,b,c,\\rbrace , N , Z , Q$ 不可数集如$R , (0,1) $ 代数结构 代数系统二元运算及其性质 二元运算 封闭与不封闭 存在性与唯一性 一元运算 在R上求平方根（不满足唯一性和存在性) 交换律、结合律 幂等律 $forall x \\in S , x \\circ x = x$ $x$称为幂等元 分配律与吸收律(课本P180) (左、右)单位元（也称为幺元） (左、右)零元（PPT_Chapter 9 Page20) (左、右)逆元(逆元存在性是对集合中的元素而言的) 证明定理设Z是集合, *是Z上的二元运算,并且是可结合的，运算*的幺元是1。若$x∈Z$有左逆元和右逆元,则它的左逆元等于右逆元,且逆元是唯一的。(PPT_Chapter 9 Page24) 综合练习题(PPT_Chapter 9 Page50、52) 消去律(课本P183) 代数系统 代数系统组成（非空集合、运算、特异元素（代数常数）） 同类型代数系统:具有相同个数的运算、代数常数，且对应运算的元数相同 运算封闭(PPT_Chapter 9 Page37) 子代数系统 会判断子代数系统 如：$&lt;N,-&gt;$不是$&lt;Z,-&gt;$的子代数系统 平凡子代数（最大、最小子代数） 真子代数 积代数、因子代数 积代数的运算性质与因子代数相同 $e_1,e_2$是子代数的代数常数,则$&lt;e_1,e_2&gt;$是积代数的代数常数 如果$x,y$是子代数的可逆元素,则$&lt;x,y&gt;$是积代数的可逆元素,逆元是$&lt;x^{-1},y^{-1}&gt;$ 积代数保留了因子代数的分配律和吸收律，但不保留消去律。（课本P188） 代数系统的同态与同构 同态(映射)概念(课本P189) 单同态、满同态、双同态（同构) 自同态 零同态 说明：判别或证明同态映射的方法 (1) 先判断（或证明）f 是$G_1$到$G_2$的映射$f:G_1 \\to G_2$. 如果已知$f:G_1 \\to G_2$，则这步判断可以省去. (2) $\\forall x, y\\in G1$, 验证 $f(x \\times y) = f(x) \\times f(y)$ (3) 判断同态性质只需判断函数的单射、满射、双射性即可. 群与环群的定义及性质 群分类 半群：代数系统上成立结合律。 幺半群（独异点）: 有幺元的半群 群（幺半群且每个元素均有逆元) Klein四元群 会验证群类型(定义验证，注意运算封闭性) 概念 有限群、无限群 群的阶 平凡群 交换群(阿贝尔群) 群中元素的幂(PPT_Chapter 10 Page12) 群中元素的阶（也叫周期）,记作$|a|=k$(k为使$a^k=e$成立的最小正整数) 幂运算性质 证明消去律和定理10.3、例10.7(课本P197-198) 子群 子群就是群的子代数 真子群 子群说明：&lt;H,*&gt;是子群, 则 H对于运算*是封闭的 G的幺元e在H内 H的每个元素的逆元仍在H内(对逆运算封闭)。至于运算的结合律,由于在G中成立,对于H必然成立 如H构成子群,必然是非空的,至少有幺元e 证明和使用子群判定定理(课本P199) 会求由$a$的幂次生成的子群,记作$&lt;a>=\\lbrace a^k|k\\in Z\\rbrace$ 中心（群中所有可交换元素构成的集合） 子群格 会画哈斯图 证明方法 证明群中元素相等的基本方法就是用结合律、消去律、单位元及逆元的惟一性、群的幂运算规则等对等式进行变形和化简. 证明子集相等的基本方法就是证明两个子集相互包含 证明与元素的阶相关的命题，如证明阶相等，阶整除等. 证明两个元素的阶r 和 s 相等或证明某个元素的阶等于r，基本方法是证明相互整除.在证明中可以使用结合律、消去律、幂运算规则以及关于元素的阶的性质. 特别地，可能用到a为1阶或2阶元的充分必要条件是$a^{-1} = a$ 格与布尔代数格的定义与性质 格：偏序集中任意元素均有最小上界和最大下界 $x\\lor y$表示最小上界 $x\\wedge y$表示最大下界 幂集格 对偶命题 格的运算$\\lor \\wedge$满足交换、幂等、结合、吸收律($a\\lor(a\\wedge b)=a, a\\wedge(a\\lor b)=a$) 注意这里的$\\lor \\wedge$是最小上界和最大下界 格的代数系统定义 证明定理11.2(课本P225) 对应定理(PPT_Chapter 11 Page15) 子格 分配格、有补格与布尔代数 分配格 会判断分配格 $L$是分配格当且仅当$L$中不含与钻石格、五角格同构的子格. 小于5元的格都是分配格 任何一条链都是分配格 有补格 全上界、全下界、有界格 补元(PPT_Chapter 11 Page28) 有界分配格补元若存在则唯一。 有界格中所有元素补元均存在则称为 有补格 布尔代数（布尔格) 也叫有补分配格，记作$&lt;B,\\wedge,\\lor,’,0,1>$其中$’$为求补运算 集合代数、命题代数(PPT_Chapter 11 Page39) 定理11.7 必看（双重否定律与德摩根律） 等价定义（交换律、分配律、同一律、补元律） 原子 图论 知识点过于零散，且多为信息学竞赛/ACM竞赛中重复知识，只针对部分概念：考试重点：欧拉图、哈密顿图、最小生成树、树的遍历 图的基本概念图 顶点数称作图的 阶，n个顶点的图称作n阶图。 零图：无边图；n阶零图记作$N_n$. 一阶零图$N_1$称为平凡图。 空图：顶点集为空集,符号化为:$\\emptyset$ 标定图与非标定图:给顶点和边加上符号 有向图的无向化的无向图称为基图。 边与端点的关联次数:0,1,2 点相邻:有边相连； 边相邻:共点 孤立点:无边关联的点 (闭)邻域、关联集、先驱、后继 平行边：即重边，平行边的边数称为 重数 简单图:不含平行边、环(离散数学中的环即是自环)的图称为 简单图 度数（入度、出度）、最大度、最小度 悬挂顶点：度数为1的顶点。与之关联的边称作 悬挂边。 握手定理 无向图中，所有顶点的度数之和等于边数的两倍 有向图中，所有顶点的度数之和等于边数的两倍;所有顶点的入度和等于所有顶点的出度和，都等于边数。 推论:奇度顶点的个数是偶数。 度数列、可(简单)图化 非负整数列可图化当且仅当$\\sum_{i=1}^{n}d_i$为偶数 设$G$为$n$阶无向简单图,则$\\Delta (G)\\leq n-1$ 图同构 n阶无向完全图、n阶完全图、n阶有向完全图、n阶竞赛图、k-正则图 母图、子图、导出子图 补图、自补图 通路与回路(课本P301) 通路，简单通路，初级通路（路径） 回路，简单回路，圈图的连通性 顶点之间连通 连通图，连通分支，距离 点割集，割点，边割集，割边（桥） 点连通度，边连通度 强连通，单向连通，弱连通 图的矩阵表示 关联矩阵 邻接矩阵 可达矩阵 欧拉图与哈密顿图欧拉图 欧拉通路——经过图中每条边一次且仅一次行遍所有顶点的通路. 欧拉回路——经过图中每条边一次且仅一次行遍所有顶点的回路. 欧拉图——具有欧拉回路的图. 半欧拉图——具有欧拉通路而无欧拉回路的图. 规定平凡图为欧拉图. 环不影响图的欧拉性. 判定欧拉图(课本P317) 哈密顿图 (1) 哈密顿通路——经过图中所有顶点一次仅一次的通路.(2) 哈密顿回路——经过图中所有顶点一次仅一次的回路.(3) 哈密顿图——具有哈密顿回路的图.(4) 半哈密顿图——具有哈密顿通路且无哈密顿回路的图. 几点说明： 平凡图是哈密顿图.哈密顿通路是初级通路，哈密顿回路是初级回路.环与平行边不影响哈密顿性.哈密顿图的实质是能将图中的所有顶点排在同一个圈上 判定哈密顿图 (课本P321) 最短路问题等树 无向树及生成树 无向树的定义 (包括等价定义) 无向树的性质 生成树 定义，由连通图构造 最小生成树的克鲁斯克尔算法。 根树及其应用 有向树及根树的定义， 家族树，有序树，r叉树的概念 最优二叉树的概念和哈夫曼算法，二叉树周游 资料合集来自由薛晖老师离散QQ群 :点击下载 薛晖老师 所有课件 来自外班同学:点击下载 杨鹏老师 所有课件 来自外班同学:点击下载 计科考试真题 来自倒数第二节复习课:点击下载 最后例题","tags":[{"name":"期末复习","slug":"期末复习","permalink":"http://www.zjdx1998.ml/tags/期末复习/"},{"name":"离散数学","slug":"离散数学","permalink":"http://www.zjdx1998.ml/tags/离散数学/"}]},{"title":"大一下学期面向对象程序设计（1）期末复习","date":"2018-06-05T02:56:39.000Z","path":"2018/06/05/c-review/","text":"期末复习总览占比分布期末 70% 作业 20% 考勤 10% 笔试阅读程序 4题各5分 填空 2题各10分 5空 上机 3*20分 考试要点构造函数、析构函数拷贝构造函数什么时候使用？ 传值，返回值 例子(共调用3+2次) : add(cls x,cls y){ return x+y; } add(x,y) 常成员函数Composition函数初始化先对成员对象初始化,构造函数初始化列表 static操作符重载必须重载为全局函数 虚函数纯虚函数后加 = 0 栈展开对象释放 分章复习Chapter 9 类（1）条件编译`#ifndef FILENAME_H` `#define FILENAME_H` `#endif` Sizeof只包括数据成员的大小 VC为了确保结构的大小为结构的字节边界数（即该结构中占用最大空间的类型所占用的字节数）的倍数，所以在为最后一个成员变量申请空间后，还会根据需要自动填充空缺的字节。 比较以下例子 class test1{ char c; } sizeof : 1 class test2{ char a,b,c,d,e; } sizeof : 5 class test3{ int num; char a; } sizeof : 8 class test4{ int num; char a,b,c,d,e; } sizeof : 12 class test5{ char a;int num;char b; } sizeof : 12 this指针每一个成员函数都有一个隐藏的指针类型形参：this &lt;类名&gt; *const this 通过对象调用成员函数时，编译程序会把对象地址作为隐含参数传递给形参this 访问this指向对象的成员时：this-&gt; (也可以省略不写) 接口与实现分离A.h A.cpp 编译-&gt; A.obj B.cpp 编译 B.obj A.obj B.obj 链接 -&gt; B.exe 软件供应商在他们的产品中只需提供头文件和类库(目标模块)，而不需提供源代码。 访问函数与工具函数 访问(access)函数,public,用来读取或显示数据,如setName,getName。如vector.empty() 工具(utility)函数,private,一般在public函数里面被使用。 构造函数与析构函数 缺省构造函数： 不带参数的构造函数 所有参数都有默认值的构造函数考虑以下例子为什么编译失败(缺省构造函数重载失败) 123456789101112class A&#123; int x, y;public: A(int x1 = 0,int y1 = 0) x = x1; y = y1; &#125; A(int x1)&#123; x = x1; y = 0; &#125;&#125;; 只要类中提供了构造函数，即使没有提供缺省构造函数，编译程序将不再提供缺省构造函数。 析构函数 析构函数是一个特殊的成员函数，它的名字同类名，并在前面加“～”字符，用来与构造函数加以区别。析构函数不接收任何参数，也不可以指定返回类型。 一个类中只能定义一个析构函数，析构函数不能重载，且必须是公有的。 下面两种情况，析构函数将会被自动调用 如果一个对象被定义在一个函数体内，则当这个函数结束时，该对象的析构函数被自动调用； 当一个对象是使用new运算符被动态创建的，在使用delete运算符释放它时，delete将会自动调用析构函数 存储类别具体可以参考这里 全局对象：在任何函数(含main)执行前，构造；在程序结束时，析构. 局部对象：(栈区) 自动变量：对象定义时，构造；块结束时，析构. 静态变量：首次定义时，构造？；程序结束时，析构. 对象间调用构造函数和析构函数的顺序恰好相反. 全局和静态对象(均为静态存储类别)同理. 特例1：调用exit函数退出程序执行时，不调用剩余自动对象的析构函数. 特例2：调用abort函数退出程序执行时，不调用任何剩余对象的析构函数. 小陷阱:私有数据成员的引用考虑以下程序，是否出现类私有数据成员的引用情况？如何解决该问题？（加const，如何加？）1234567891011121314class A &#123;public: int &amp; setA() &#123; a = 1; return a; &#125;private: int a;&#125;;int main() &#123; A t; int&amp; r = t.setA(); return 0;&#125; 第三行变为 const int &amp; setA()即可。 赋值运算 By default, such assignment is performed by memberwise assignment(按成员赋值/逐个成员赋值). 拷贝构造函数在对还没存在的对象赋值时会调用；赋值函数在对已经存在的对象赋值会调用；赋值函数初始化前需要清理堆资源等，拷贝构造不需要。 注意点 有一种特别常见的情况需要自己定义复制控制函数：类具有指针函数。 赋值操作符和复制构造函数可以看成一个单元，当需要其中一个时，我们几乎也肯定需要另一个 三法则：如果类需要析构函数，则它也需要赋值操作符和复制构造函数 如果没定义复制构造函数（别的不管），编译器会自动生成默认复制构造函数 如果定义了其他构造函数（包括复制构造函数），编译器绝不会生成默认构造函数 即使自己写了析构函数，编译器也会自动生成默认析构函数 解决方案 自定义拷贝构造函数：按引用传递 小结 条件编译指令 访问成员函数的三种方式(句柄+操作符) 成员函数的作用域：class scope 访问函数和工具函数 带默认实参的构造函数 构造函数和析构函数被调用的顺序 破坏类的封装的一种做法：返回对私有数据成员的引用 利用一个对象初始化另一个对象(拷贝构造函数) Chapter 10 类（2）常成员函数 要求 不能修改本对象的数据成员 不能调用本对象其它non-const成员函数 建议 所有不更改object成员的函数均声明为const成员函数 注意 成员函数是否为常成员函数，不仅取决于它不修改对象、不调用non-const成员函数，而且必须显式地声明为const！ 构造函数、析构函数不能声明为const 可以调用非const成员函数初始化const对象（为什么？） 对象的常量特性体现在初始化(构造)后、析构之前。 小结 可以定义const常量，具有不可变性； 便于进行类型检查，使编译器对处理内容有更多了解，消除了一些隐患； 可以避免意义模糊的数字出现，同样可以很方便地进行参数的调整和修改； 可以保护被修饰的东西，防止意外的修改，增强程序的健壮性； 提高了效率（编译器对常量进行优化） 构造函数初始化列表构造函数初始化列表必须使用的情况 注意：C++11支持const直接赋值。1234const data member (例外?const static integer)(注：普通const必须一开始初始化)reference data member 引用类型的数据成员member objects, 数据成员是其他类(未提供缺省构造函数)的对象*继承类的基类base class* 组合 成员对象的构造和析构顺序 成员对象的构造先于宿主对象； 成员对象按照类定义中的声明顺序构造 成员对象的析构后于宿主对象。 总结 若无缺省构造函数，则必须使用初始化列表（思考原因） 若有缺省构造函数，此时如果成员对象没有显式通过成员初始化列表中初始化，则自动隐含调用缺省构造函数(default constructor). 性能方面？（避免双重初始化） 构造函数与析构函数的调用顺序 类的成员对象（public or private） 把成员对象声明为public不会影响成员对象的封装性 友元函数与友元类 为什么使用友元 为什么要使用友元函数 两个类要共享数据的时候 运算符重载的某些场合需要使用友元 使用友元函数可提高性能 用友元函数可以访问两个或多个类的私有数据，较其它方法使人们更容易理解程序的逻辑关系 缺点:破环了类的封装机制 总结： 类的友元函数在类作用域之外定义，但可以访问类的私有和保护成员 尽管类定义中有友元函数原型，友元函数仍然不是成员函数 由于友元函数不是任何类的成员函数，所以不能用句柄(对象)加点操作符来调用 public, private, protected成员访问符与友员关系的声明无关，因此友元关系声明可在类定义的任何位置，习惯上在类定义的开始位置 友元关系是指定的，不是获取的，如果让类B成为类A的友元类，类A必须显式声明类B为自己的友元类 友元关系不满足对称性和传递性 如果一个友元函数想与两个或更多类成为友元关系，在每个类中都必须声明为友元函数 new运算符 为什么使用 直到运行时才能知道需要多少对象空间； 不知道对象的生存期到底有多长； 直到运行时才知道一个对象需要多少内存空间 使用方法 基本数据类型 double *ptr = new double(3.14); delete ptr 类对象 Cls *ptr = new Cls(); delete ptr; 数组 int *array = new int[size]; delete [] array; Cls *clsarray = new Cls[size]; delete [] clsarray; static 初始化 显式初始化 静态常量整数成员可在类定义中初始化（长整形/短整形/枚举） const static int i = 0; //ok 其它情况必须在类外部定义和初始化。 static int i = 0; //error const数组成员的初始化？* 声明为const static数组，并在外部初始化 未显示初始化 静态基本类型的数据成员缺省初始化为0 静态抽象数据类型(类对象)的数据成员默认调用缺省构造函数 静态成员的空间分配并不在类的构造函数中完成，也不会在类的析构函数里完成空间回收 访问 可直接通过类名+::访问 没有this指针（为什么？） static 成员函数独立于对象存在。而this指针必须指向类的具体的对象 不能加const（为什么？） const修饰符用于表示函数不能修改成员变量的值，该函数必须是含有this指针 可通过对象访问(public)，也可直接通过类名+::访问 不能访问非静态数据成员，也不能调用非静态成员函数 总结 常量对象和常成员函数 对象的组合 友元函数和友元类 this指针(隐含参数，作用：级联调用) 动态内存分配 静态类成员 Chapter 11 运算符重载运算符重载 定义方式: ClassName operator@([const ClassName&amp; A]) 调用方式: 普通函数 全局函数: 函数名(参数列表) 类成员函数: 对象.函数名(参数列表)等 重载的运算符 使用时以表达式形式出现: HugeIntA + HugeIntB 针对对象，三个不用重载的运算符： assignment operator (=) address operators (&amp;) comma operators (,) 限制 重载运算符应该仿效其相应的内置对象的功能 重载成的成员函数必须是非static的(带着问题思考) HugeInt operator+(const HugeInt&amp; a); 不能更改Precedence(优先级), Associativity(结合律) 以及 Number of Operands(操作数数目) 仅能重载现有运算符，不能创造新运算符 运算符函数运算符函数可以是成员函数或者全局函数 当重载为类的成员函数时 非静态的类成员函数 使用this指针隐性获取操作左值 左操作数(或唯一的操作数)必须为该类对象(或对象引用) 将自动包含该类对象(或其引用)作为操作数，函数参数个数等于运算符目数-1 当重载为全局函数时 形式class HugeInt { friend HugeInt operator+(const HugeInt &amp;, int); }; 函数参数个数等于运算符的目数 全局函数: 是否访问私有数据 Friend（可访问私有数据）复习~~~ Non-friend 思考：必须重载为全局函数的情况 左操作数必须为不同类型对象或一个基本类型对象 使运算符具有可交换性 HugeInteger + int 和 int + HugeInteger 成员函数+参数调换的全局函数 设计原则 ( ), [ ], -&gt;和赋值(=, +=, -=等)运算符 必须 重载为成员函数 >>, &lt;&lt;和需要支持交换律(Commutative)的运算符重载为全局函数 其余运算符可以选择重载为成员或全局函数 输入输出流运算符重载输出流重载 friend ostream &amp;operator&lt;&lt;(ostream&amp;, const cls &amp;)输入流重载 friend istream &amp;operator&gt;&gt;(istream&amp;) 一元运算符重载例子:1234567class String &#123;public: bool operator!( ) const;&#125;;class String &#123; friend bool operator!( const String &amp;);&#125;; 二元运算符重载 带有一个参数的成员函数 前提条件是仅当左操作数是该函数所在类的对象 带有二个参数的全局函数 其中一个参数必须是对象或对象引用例子：1234567class String &#123;public: bool operator&lt;( const String &amp;) const;&#125;;class String &#123; friend bool operator&lt;( const String &amp;, const String &amp;);&#125;; 运算符重载小结 const Array &amp;operator=( const Array &amp; );为何返回值要加&amp;和const？ &amp;为了在a=(b=c)时提高性能 参数的&amp;为了防止自我复制 Const类型的返回值表示对相关对象的保护，实现禁左。禁止(a=b)=c 虚悬指针（产生原因）与指针回收问题 关于delete之后的指针使用（有的编译器可以访问，但会有潜在的错误） 通常会为任何一个使用动态分配内存的类同时提供一组函数（重要！）： 复制构造函数 析构函数 重载的赋值运算符函数 如何阻止类对象的复制 将重载的赋值运算符以及拷贝构造函数设置为private 类型转换 同类对象转换 ： 初始化对象,拷贝构造函数 非同类对象转换： 转换构造函数 重载强制类型转换运算符123456789101112函数声明形式 A::operator int() const; // 不需要返回值,不修改原对象 实现：A -&gt; int A::operator OtherClass() const; 实现：A-&gt; OtherClass用户调用： A s； static_cast&lt;int&gt;(s); static_cast&lt;OtherClass&gt;(s);编译器调用：s.operator int(); s.operator OtherClass(); 几个常用的cast dynamic_cast: 通常在基类和派生类之间转换时使用 const_cast: 主要针对const和volatile的转换. static_cast: 一般的转换 reinterpret_cast: 用于进行没有任何关联之间的转换，比如一个字符指针转换为一个整形数。 小结 转换构造函数 重载强制类型转换运算符 隐式调用原则： 先查找符合要求的函数 再调用转换运算 转换运算不能级联调用(仅能调用一次) 总结 哪些运算符可以重载？何时需要重载？有何限制？如何重载？ “.”,”.*”,”::”,”?:”不能重载 “=“,”&amp;”,”,”可以直接使用但有时也需要重载 成员函数 vs 全局函数 ( ), [ ], -&gt;和赋值(=, +=, -=等) 运算符必须重载为成员函数（有时函数需要被重载为常成员函数） 支持交换律的运算符必须重载为全局函数 拷贝构造函数和转换构造函数 自定义String类 vs 标准string类 Chapter 12 继承is-a与has-a的区别 is-a代表继承 一个类继承自另一个类 属于更加专有的一类对象 可以一个类继承一些行为，也可修改甚至创建新的行为 例如vehicle类，有加速、减速等行为，car继承vehicle，同样有这些行为，也可以有新的行为（如打开后备箱等） has-a代表组合关系 一个对象包含其它的成员对象 例如Employee类中包含firstname、lastname、birthdate、hiredate等对象 继承 作用 软件复用； 对事物进行分类； 支持软件的增量开发； 对概念进行组合。 声明：class &lt;派生类名&gt;:&lt;继承方式&gt;&lt;基类名&gt; {……};（多继承在后面添加） 访问规则 派生类吸纳基类的数据成员及成员函数（隐性） 派生类的成员函数如何访问基类的数据成员和成员函数？(public继承) 可以访问基类中的非private数据成员及成员函数 无法直接访问基类的private成员 可以通过基类中提供的非private成员函数实现对基类中private数据成员进行修改 通常派生类需要重新定义一些成员函数，以实现派生类特有的功能及操作 继承中的访问模式 基类的public成员能够被程序中所有函数访问 基类的private成员只能被基类的成员函数和友元访问 基类的protected成员只能被基类的成员和友元以及派生类的成员和友元访问。 注意：不能被类的实例（对象）访问。 派生类如何访问基类的数据成员？ 默认情况：派生类成员简单地使用成员名就可以引用基类的public成员和protected成员。 当派生类重新定义了基类的成员函数时，访问方式： base-class name:: + 成员函数 只要在派生类中重写基类的函数（函数名相同，即使参数不同），就无法默认调用基类的相关函数，此时基类中的函数需要“基类::函数名”来调用。 派生类与基类的关系 初始化 如果派生类的构造函数没有显示调用基类的构造函数，C++将尝试隐式调用默认的构造函数（前提：基类需要有缺省的构造函数） 采用成员初始化器列表显示地初始化成员对象和调用基类的构造函数，可以防止重复初始化 头文件:在派生类头文件中使用#include包含基类头文件 告诉编译器基类的存在 让编译器根据类的定义确定对象的大小，派生类的对象大小取决于派生类显式定义的数据成员和继承自基类的数据成员 让编译器能够判断派生类是否正确的使用了基类的成员 注意事项 影响数据的有效性检查 派生类可以直接访问基类的protected数据成员 派生类依赖于基类的实现 基类的数据成员发生改变有可能影响派生类的实现 软件“易碎”或“脆弱”，不够健壮 基类仅向派生类提供服务，则可使用protected类型声明，其他情况慎用protected 在派生类中重定义基类成员 通过调用基类的public成员函数来访问基类的私有数据成员 当功能相同时，尽量调用成员函数，以避免代码拷贝。 重定义基类成员函数时，一定要使用“::”访问基类成员，否则会引起无限递归，例如：earnings() 注意print()和earnings()的重新定义：调用基类的print()和earnings()函数 符合软件工程要求：使用继承，通过调用成员函数隐藏了数据，保证了数据的一致性。 基类、派生类中的构造与析构函数 构造顺序 建立派生类的实例对象时、必须调用基类的构造函数来初始化派生类对象的继承成员。 派生类的构造函数既可以隐式调用基类的构造函数，也可以在派生类的构造函数中通过给基类提供初始化值显式地调用。 基类构造函数-&gt;派生类构造函数 析构顺序 析构函数的调用顺序和构造函数的顺序相反，因此派生类的析构函数在基类析构函数之前调用。 包含成员对象的情况，假设基类和派生类都包含其他类的对象： 在建立派生类的对象时，首先执行基类成员对象的构造函数，接着执行基类的构造函数，然后执行派生类的成员对象的构造函数，最后才执行派生类的构造函数。析构函数的调用次序与调用构造函数的次序相反。 基类成员对象初始化—&gt;基类的构造函数—&gt;派生类成员对象初始化—&gt;派生类构造函数 建立成员对象的顺序是对象在类定义中的声明顺序。成员初始化器中的顺序不影响建立对象的顺序。 继承小结 公有继承 基类成员对其对象的可见性：公有成员可见，其他不可见。这里保护成员同于私有成员。 基类成员对派生类的可见性：公有成员和保护成员可见，而私有成员不可见。这里保护成员同于公有成员。 基类成员对派生类对象的可见性：公有成员可见，其他成员不可见。一定要区分派生类的对象和派生类中的成员函数对基类的访问是不同的。 私有继承 基类成员对其对象的可见性：公有成员可见，其他成员不可见。（同前） 基类成员对派生类的可见性：公有成员和保护成员可见，私有成员不可见。（同前） 基类成员对派生类对象的可见性：所有成员都不可见。保护继承与私有继承类似 总结 不论公有继承还是私有继承，基类成员对于派生类的访问权限是不变的。（可访问公有或保护类型成员） 变化的是派生类的对象以及派生类的派生类对基类成员的访问权限。 基类和派生类的定义 Protected成员 基类和派生类的关系：public，proteced，private 继承关系中构造函数和析构函数顺序 复合(has-a)和继承(is-a)的关系 “使用”和”知道” Chapter 13 多态面向对象三大要素数据封装 继承 多态 多态 解释1：同样的消息被类的不同对象接收时导致的完全不同的行为的一种现象。这里所说的消息即对类的成员函数的调用。 解释2：通过指向派生类的基类指针，调用派生类的函数; 将不同的派生类对象都当作基类来处理，并根据对象不同产生不同的行为，以屏蔽各派生类对象之间的差异。写出通用的代码，使得程序员可以方便地处理普遍性问题。 C++语言支持两种类型的多态： 编译时的多态(静态多态) ——函数重载 运行时的多态(动态多态) ——虚函数 多态性提高了软件的可扩展性，使得可以用与接收消息对象类型无关的方式编写 继承中的对象关系 Invoking Base-Class Functions from Derived-Class Objects（基类指针指向派生类，调用基类函数） 结论: 调用基类还是派生类的函数，取决于句柄的类型，而不是句柄指向的实际对象类型 Aiming Derived-Class Pointers at Base-Class Objects（派生类指针指向基类，错误） Derived-Class Member-Function Calls via Base-Class Pointers（基类指针指向派生类，调用派生类函数，错误） 结论: 通过对象句柄，仅能调用该句柄类型的成员函数 解决办法: downcasting(dynamic_cast) 虚函数 语法 调用哪个(基类/派生类)虚函数，由对象类型而不是句柄类型决定. 虚函数用于继承结构中的基类和派生类，以实现多态. 派生类中覆盖(Overridden)的虚函数和基类中的虚函数必须函数签名和返回值均相同. 包括函数名称、返回值、参数个数、类型、是否const都要一致 调用虚函数的两种方式 通过指向派生类的基类指针(或引用)调用，程序会在执行时(execution time)根据对象类型动态选择合适的派生类函数 – 动态绑定( dynamic binding )或延迟绑定( late binding ). 通过对象名和点操作符调用，程序在编译时(compile time)即根据对象类型确定函数– 静态绑定( static binding ). 只有通过引用或指针来访问对象的虚函数时才进行动态绑定。 通过引用或指针访问对象的非虚成员函数，采用静态绑定。（与句柄类型的成员函数代码绑定） 通过“类名+::”访问对象成员函数，也采用静态绑定。 基类构造函数中对虚函数的调用不采用动态绑定。 通过指针访问其他成员函数并调用虚函数时仍需动态绑定。 限制 只有类成员才能声明为虚函数 静态成员函数不能是虚函数 构造函数不能是虚函数 析构函数可以是虚函数，并且通常声明为虚函数(注意基类和派生类的析构函数不同名)例： 12commissionEmployeePtr = &amp;basePlusCommissionEmployeedelete commissionEmployeePtr; 调用的是basePlusCommissionEmployee的析构函数 纯虚函数与抽象类 语法 : virtual void function() const = 0; Abstract Class(抽象类): 包含一个或者多个纯虚函数的类。无法实例化(但可以声明指针和引用)，只能用于继承。Shape obj; // Error Rectangle objRectangle; Shape *ptr = &amp;objRectangle; // OK Shape &amp;ref = objRectangle; // OK 作用：为派生类提供一个基本框架或公共接口。 Concrete Class(具体类): 不包含纯虚函数，可以实例化。 总结 成员函数是否声明为虚函数，取决于是否需要多态性支持 虚函数是否声明为纯虚函数，取决于该函数对于当前类是否有意义，以及当前类是否需要实例化 Chapter 14 模板概念利用一种完全通用的方法来设计函数或类而不必预先说明将被使用的每个对象的类型，利用模板功能可以构造相关的函数或类的系列，因此模板也可称为参数化的类型。——泛型编程（Generic Programming） 分类类模板(class template)和函数模板(function template)。 函数模板 声明 template关键字+尖括号&lt;&gt;括起来的template parameter list（模板参数列表） 参数列表 参数称为formal type parameter（形式类型参数）。在函数调用时替换为基本数据类型或用户自定义数据类型。 每个参数都必须以关键词typename （或class ）起头，参数和参数之间必须以逗号分隔，如 template &lt; typename T, typename V&gt; 理解 函数模板只是说明，不能直接执行，需要特化为模板函数后才能执行。 处理过程 在程序中说明了一个函数模板 编译系统发现有一个相应的函数调用 例如：printArray( a, ACOUNT ); 编译器寻找和使用最符合函数名和参数类型的函数调用 根据实参中的类型来确认是否匹配函数模板中对应的形参，然后生成一个重载函数(函数模板特化)。（该重载函数的定义体与函数模板的函数定义体相同） 编译这个新建的函数 重载 允许有其它同名的函数模板，但参数不同 允许有其它同名的函数，但参数不同 编译器挑选最佳匹配的函数或模板 编译器通过匹配过程确定调用哪个函数。 首先，编译器寻找和使用最符合函数名和参数类型的函数调用。如果找不到，则检查是否可以用函数模板产生符合函数名和参数类型的模板函数。 如果有多个函数和调用函数相匹配（且匹配程度相同），编译器会认为有二义性，将产生编译错误 如果没有找到符合函数，将考虑调用强制类型转换 类模板 定义 1、类模板通过允许将泛型类实例化为明确类型的类来实现软件复用 2、类是对问题空间的抽象，而类模板则是对类的抽象，即更高层次上的抽象。 3、程序中可以首先定义一个类模板，然后通过使用不同的实参生成不同的类。 4、类模板的定义格式： 12345template &lt;typename &lt;类型参数&gt;&gt; //模板声明class &lt;类名&gt; // 类定义&#123; ……&#125;; 5、每个“类型形参”前必须加typename or class关键字，对类模板进行实例化时，代表某种数据类型；也可以是普通数据类型形参，实例化时代表具体数据,如 123456template &lt; typename arg1, int arg2, typename arg3&gt;class myclass &#123; arg1 buffer[arg2]； arg3 x; //类的定义体 &#125;； 6、类模板中成员函数可以放在类模板的定义体中(此时与类中的成员函数的定义方法一致)定义，也可以放在类模板的外部来定义，格式为： 1234template &lt;类型形参表&gt;函数返回类型 类模板名&lt;类型名表&gt;::成员函数(形参)template &lt; typename arg1, int arg2, typename arg3&gt;void myclass&lt;arg1,arg2,arg3&gt;::print() &#123;&#125; 7、 类模板定义只是对类的描述，它本身还不是一个实实在在的类。 类模板不能直接使用，必须先特化（specialized）为相应的模板类，定义模板类的对象(即实例)后，才可使用(创建对象等)。 可以用以下方式创建类模板的特化及对象。 类模板名&lt;类型实参表&gt; 对象名表； 如：Myclass a; 此处的&lt;类型实参表&gt;要与该模板中的&lt;类型形参表&gt;匹配，要具有同样的顺序和类型，否则会产生错误！ 非类型参数和类模板的缺省类型 非类型的模板形参 特化时作为常量对待 可以有缺省参数 Example: 123Template header: template&lt; typename T, int elements = 10 &gt;Declaration: Stack&lt; double, 100 &gt; salesFigures; 类型形参也可以有默认实参 Example Template header: template&lt; typename T = string &gt; Declaration: Stack&lt;&gt; jobDescriptions; Explicit specializations(显式特化) 当某一特殊数据类型不能使用通用类模板时，可以定制处理(即：重定义该类型的类模板。) 显式特化： Stack&lt; Employee &gt; specialization template&lt;&gt; class Stack&lt; Employee &gt;{…};完全代替了通用类模板 Stack&lt; Employee &gt;没有使用原来类模板的任何内容，甚至可以包含不同的成员 优点：可以兼容已有的基于模板的操作 函数模板与友元函数 函数声明为类模板的每一个特化的友元 friend void f1();//无参数 f1 is a friend of X&lt; double &gt;, X&lt; string &gt;, etc. 函数声明为类模板的某一类型参数特化的友元 friend void f2( X&lt; T &gt; &amp; );//带参数 f2( X&lt; float &gt; &amp; ) is a friend of X&lt; float &gt; but not a friend of X&lt; string &gt; 另一个类的成员函数可以声明为类模板每一个特化的友元（无参数） friend void A::f3(); f3 of class A is a friend of X&lt; double &gt;, X&lt; string &gt;, etc. 另一个类的成员函数可以声明为类模板某个类型参数特化的友元（带参数） friend void C&lt; T &gt;::f4( X&lt; T &gt; &amp; ); C&lt; float &gt;::f4( X&lt; float &gt; &amp; ) is a friend of X&lt; float &gt; but not a friend of X&lt; string &gt; 另一个类可以声明为类模板的每一个特化的友元 friend class Y;（无类型参数） Every member function of class Y is a friend of X&lt; double &gt;, X&lt; string &gt;, etc. 另一个类可以声明为类模板的某个类型参数特化的友元 friend class Z&lt; T &gt;;（有类型参数） Class-template specialization Z&lt; float &gt; is a friend of X&lt; float &gt;, Z&lt; string &gt; is a friend of X&lt; string &gt;, etc. 函数模板与static 从类模板实例化的每个模板特化有自己的static数据成员 该模板特化的所有对象共享一个static数据成员 static数据成员必须被定义，在文件范围内被初始化 例子1234567template &lt;typename T&gt;class A&#123; static int x；&#125;； template &lt; typename T&gt; int A&lt;T&gt;::x=0; A&lt;int&gt; a1,a2; // a1和a2共享一个x A&lt;double&gt; b1,b2; // b1和b2共享一个x 总结 模板与继承的区别 当对象的类型不影响类中函数的行为时，就要使用模板来生成这样一组类。 当对象的类型影响类中函数的行为时，就要使用继承来得到这样一组类。 函数模板和函数模板重载 类模板 定义 类型参数和非类型参数 实例创建 模板和继承 模板和友元 模板中的静态成员 Chapter 16 异常处理异常处理思路 C++提供了一些内置的语言特性来抛出（throw）异常，用以通知“异常已经发生”，然后由预先安排的程序段来捕获（catch）异常，并对它进行处理。 捕获并处理异常的程序段 1234567try &#123;复合语句&#125;catch（异常类型声明1） &#123;复合语句&#125;catch（异常类型声明2） &#123;复合语句&#125; … 流程解释 将可能抛出异常的程序段嵌在try块之中，并通过throw操作创建一个异常对象并抛掷。 如果此时没有引起异常，程序从try块后跟随的最后一个catch子句后面的语句继续执行下去。 如果存在异常，顺序检查try块后面的catch子句，匹配的catch子句将捕获并处理异常（或继续抛掷异常）。 如果匹配的处理器未找到，则默认调用terminate函数，其缺省功能是调用abort终止程序。标准库异常类 C++标准库提供的逻辑异常： invalid_argument异常，接收到一个无效的实参，抛出该异常。 out_of_range异常，收到一个不在预期范围中的实参，则抛出。 length_error异常，报告企图产生“长度值超出最大允许值”的对象 domain_error异常，用以报告域错误（domain error）。 C++标准库提供的运行时异常（） range_error异常，报告内部计算中的范围错误。 overflow_error异常，报告算术溢出错误。 underflow_error异常，报告算术下溢错误。 以上三个异常是由runtime_error类派生的。 bad_alloc异常。当new()操作符不能分配所要求的存储区时，会抛出该异常。它是由基类exception派生的。 exception类接口 123456789101112namespace std&#123; //注意在名字空间域std中 class exception&#123; public: exception() throw() ; //默认构造函数 exception(const exception &amp;) throw() ; //复制构造函数 exception &amp;operator=(const exception&amp;) throw() ; //复制赋值操作符 virtual ~exception() throw() ; //析构函数 virtual const char* what() const throw() ; //返回一个C风格的字符串，目的是为抛出的异常提供文本描述 &#125;;&#125; catch语句详解 catch子句由三部分组成：关键字catch、圆括号中的异常声明以及复合语句中的一组语句。 catch子句不是函数，所以圆括号中不是形参，而是一个异常类型声明，可以是类型也可以是对象。 catch子句的使用：由系统按抛出的异常类型自动在catch子句列表中匹配(找寻能够处理的第一个catch处理器)。（类型相同或是继承类） catch子句可以包含返回语句（return），也可不包含返回语句。包含返回语句，则整个程序结束。不包含返回语句，则执行最后一个catch处理器之后的下一条语句（不会回到异常发生点）。 如果没有异常发生，继续执行try块中的代码，与try块相关联的catch子句被忽略，程序正常执行 注意 try与catch间不能添加其他代码 一个catch处理器只能有一个参数 在try语句后两个不同catch处理器中捕获相同异常类型——错误！ 通过引用捕获异常对象，能够去除表示抛出的异常对象的复制开销 catch(…){ /代码/ } // catch_all子句 任何异常都可以进入这个catch子句。这里的三个点称为省略号。花括号中的复合语句用来执行指定操作。 catch_all子句可以单独使用，也可以与其它catch子句联合使用。如果联合使用，它必须放在相关catch子句表的最后。 如果catch_all子句放在前面进行某项操作，则其它的操作应由catch子句重新抛出异常，逆调用链去查找新的处理子句来处理。 重新抛出 当catch语句捕获一个异常后，可能无法处理或不能完全处理异常，完成某些操作后，该异常必须由函数链中更上级（更外层）的函数来处理，这时catch子句可以重新抛出（throw;）该异常，把异常传递给函数调用链中更上级的另一个catch子句，由它进行进一步处理。 throw；//异常的再抛出 由其外层的catch捕获 外层无catch处理器时，编译器调用terminate终止程序 异常指定 int someFunction( double value ) throw (a, b, c) {// fun body} 异常指定：列出函数可抛出的异常 函数可抛出指定异常或派生类型 当函数抛出异常不在异常指定中，调用C++标准库的unexpected函数 不带异常指定的函数可以抛出任何异常 void g(); 如果异常指定为throw()，表示该函数不抛出异常。 抛出一个函数异常规格中未声明的异常或者包括空异常规格下抛出异常，将由unexpected()处理 虚函数中的异常指定 派生类的虚函数的异常指定必须与基类虚函数的异常一样或更严格。因为当派生类的虚函数被指向基类类型的指针调用时，保证不会违背基类成员函数的异常规范。 例子：class CBase{ public: virtual int fun1(int) throw(); virtual int fun2(int) throw(int); virtual string fun3() throw(int,string); }; class CDerived:public CBase{ public: int fun1(int) throw(int); //错！异常规范不如throw()严格 int fun2(int) throw(int); //对！有相同的异常规范 string fun3() throw(string); } //对！异常规范比 throw(int,string)更严格 } unexpected unexpected()调用set_unexpected() 指定的函数 set_unexpected 定义在 &lt;exception> 如果set_unexpected() 未指定被调用函数，默认情况下，terminate()被调用 terminate定义在&lt;terminate> terminate()调用set_terminate()指定的函数如果set_terminate()未指定被调用函数，默认调用abort()，退出程序，不会释放内存，导致资源泄漏 函数set_terminate和set_unexpected取函数指针为参数。每个参数指向返回类型为void和无参数的函数。 栈展开(stack unwinding) 概念：因发生异常而逐步退出复合语句和函数定义的过程。 具体过程 当异常被抛出但没有在特定的域内被捕获时，该函数调用堆栈将展开，并试图在下一个外部try-catch语句中处理 展开函数调用堆栈意味着在调用链中没有捕获异常的函数将会终止执行，并控制返回到最初调用该函数的语句中 如果该调用语句被一个try语句包含，则试图捕获该异常；否则堆栈展开将继续发生 如果在main函数中仍没有找到匹配的Handler, 则调用terminate函数(该函数缺省调用abort, 不执行栈展开), 结束程序. 每抛出一个异常，首先找到能捕获处理该异常的catch块； 利用throw语句中的”实参”对相应的”catch”块的“形参”进行初始化； 检查从抛出异常的try块首到throw之间已进行构造但尚未析构的那些处于堆栈中的局部对象，自动进行退栈和析构处理。 注意点 在栈展开期间，在退出的域中有某个局部量是类对象，栈展开过程将自动调用该对象的析构函数，完成资源的释放。 特别说明：由堆栈展开而调用的析构函数抛出了异常，那么terminate将被调用 调用terminate函数的情况： 对于抛出的异常，异常机制找不到匹配的catch块 析构函数试图在堆栈展开时抛出异常 在没有异常要处理时试图重新抛出异常 调用函数unexpected将默认调用函数terminate 在调用terminate函数时，函数set_terminate可以指定被调用的函数。否则默认调用abort函数（不会对自动或静态存储类对象调用析构函数） 构造、析构函数与异常处理 异常处理抛出前为try语句块中构造的所有局部对象自动调用析构函数 如果一个对象包含成员对象，且在外部对象完全构造前抛出了异常，那么异常出现之前构造的成员对象将被析构 如果在异常发生时数组对象只部分构造，则只有已构造的部分被析构 继承与异常处理如果catch捕获基类类型异常对象的指针或引用，则可以捕获该基类所派生的异常对象的指针或引用。这样允许多态处理错误。123456try&#123; …… throw Cdrived;&#125;catch (Cbase &amp; base) &#123;base.DoSomething();&#125; new与异常处理 Function set_new_handler 函数参数为没有参数没有返回值的函数指针 一旦注册了new处理器，则不会抛出bad_alloc C++标准指出new处理器需要完成以下任务的一个 通过释放其他动态分配的内存，再次尝试分配 抛出bad_alloc异常 调用函数abort或exit结束程序 总结 异常的概念 try…throw…catch模块的语法和处理流程 栈展开过程（与构造和析构的关系） 对其它异常的处理方法 new异常的处理 动态内存分配异常的处理 Chapter 17 文件文件的基本概念 本节中文件指的是磁盘文件。C++文件（file）分为两类：文本文件和二进制文件。 文本文件由字符序列组成，也称ASCII码文件，在文本文件中存取的最小信息单位为字符（character） 二进制文件中存取的最小信息单位为字节（Byte），如.obj C++把每一个文件都看成一个有序的字节流，每一个文件或者以文件结束符（EOF）结束，或者在特定的字节号处结束。 Bits (二进制位) 0 or 1 计算机支持的最小数据项 计算机电路执行位处理 所有数据项最终由位组成 Characters(字符) 数字、字母和专门的符号称为“字符” 能够在特定计算机上用来编写程序和代表数据项的所有字符的集合称为“字符集” Char以字节形式存储 (8 bits) Wchar_t 占多个字节(用于非英文字符集的表示) Fields(字段或数据项) 由字符组成 代表一定的含义 Example：姓名，颜色等等 Records(记录) 由多个字段组成 C++中表现为：类 Example An employee’s record might include id#, name, address, etc. 记录的关键字：A record key is a field unique to each record 流 当打开一个文件时，该文件就和某个流关联起来了。对文件进行读写实际上受到一个文件定位指针（file position pointer）的控制。 输入流的指针也称为读指针，每一次提取操作将从读指针当前所指位置开始，每次提取操作自动将读指针向文件尾移动。 输出流指针也称写指针，每一次插入操作将从写指针当前位置开始，每次插入操作自动将写指针向文件尾移动。 为了在C++中执行文件处理，必须包含头文件&lt;iostream&gt;和&lt;fstream&gt; 文件处理必须包含头文件： #include&lt;fstream&gt; 包括三种类模板的定义123basic_ifstream (for file input)basic_ofstream (for file output) basic_fstream (for file input and output) 提供了处理字符流的模板特化123ifstream:从文件中读入字符(读文件)ofstream:向文件输出字符(写文件)fstream：支持文件中字符的输入和输出 生成这些流类模板特化的对象，即可打开文件程序和文件之间通过流对象交互 写数据到文件 创建ofstream对象 构造函数ofstream(const char* filename,int mode) filename：文件名由文件的主名和扩展名两部分组成。 mode： ios::out ：缺省模式，覆盖文件中已有数据 ios::app：向文件末尾添加数据 例：ofstream outClientFile( &quot;clients.dat&quot;, ios::out ); 建立了一个到文件的“通信通道” 如果该文件名不存在，则新建一个同名文件 对于已创建的文件对象，使用成员函数打开文件 与构造函数的参数相同，可以先创建再打开 例：ofstream outClientFile；`outClientFile.open(&quot;clients.dat“, ios::out);` 说明in ：(从文件读取) 打开方式只要含in，如文件不存在则返回失败。在打开为输入输出方式时（同时用out），编程应注意判断是否失败，失败时千万不可再写入文件。out： (写入文件) 如文件不存在，则建立新文件，如文件存在，如果同时未设定app, in，则文件清空。trunc：（打开文件，并清空它）文件不存在则建立新文件，与out默认操作相同。但与in配合，文件不存在则返回失败。app：(写入文件，添加在末尾)原文件内容保留，新数据接在尾部。ate: (at end，打开文件，文件指针在文件尾) 文件指针可以移动，即新数据可写到任何位置。文件是否清空由其它标识决定。 trunc/app/ate最好配合out、in等一起用，因为不同的C++平台，要求不同，一起用不会出错。如不一起用，至少VC++不认这种格式。 binary标识以二进制方式打开文件。同时用out时，如文件不存在，则建立新文件，并且新文件能用，不必清状态字。 既输入又输出 fstream iofile； iofile.open(“myfile.txt”,ios::in|ios::out); 文件的打开和关闭 打开文件时应该判断是否成功，若成功，文件流对象值为非零值，不成功为0（NULL），文件流对象值就是指它的地址。 说明一个文件流对象，这又被称为内部文件： ifstream ifile；//只输入用 ofstream ofile；//只输出用 fstream iofile；//既输入又输出用 使用文件流对象的成员函数打开一个磁盘文件。 iofile.open(“myfile.txt”,ios::in|ios::out); 也可直接通过构造函数打开文件： fstream iofile(”myfile.txt”,ios::in|ios::out); 使用提取(&gt;&gt;)和插入(&lt;&lt;)运算符对文件进行读写操作，或使用成员函数(get\\put)进行读写。 关闭文件。三个文件流类各有一个关闭文件的成员函数 : void ifstream::close(); void ofstream::close(); void fstream::close(); 使用很方便，如：iofile.close(); 文件关闭 关闭文件时，系统把该文件相关联的文件缓冲区中的数据写到文件中，保证文件的完整，收回与该文件相关的内存空间，把磁盘文件名与文件流对象之间的关联断开，可防止误操作修改了磁盘文件。 关闭文件并没有取消文件流对象，该文件流对象又可与其他磁盘文件建立联系。文件流对象在程序结束时，或它的生命期结束时，由析构函数撤消。它同时释放内部分配的预留缓冲区。 调用析构函数也会关闭相应正在打开的文件 在Windows平台下如果以“文本”方式打开文件，当读取文件的时候，系统会将所有的”\\r\\n”转换成”\\n”；当写入文件的时候，系统会将”\\n”转换成”\\r\\n”写入。如果以”二进制”方式打开文件，则读/写都不会进行这样的转换。 文件定位指针： 文件中下一个被读取或写入的字节号 istream、ostream都提供了修改文件定位指针的成员函数 seekg(long pos, int mode)—istream seekp(long pos, int mode)—ostream 规范化操作 在面向对象的程序设计中，信息总是放在对象的数据成员里。这些信息最终需要保存到文件中。 读取文件中对象的信息时，必须重新创建对象，把数据读入对象，在运行过程中，对放在对象的数据成员里的信息利用和修改，运行结束时必须把这些信息重新保存到文件中，然后关闭文件 在面向对象的C++程序设计中，文件应该在构造函数中打开，并创建对象；而在析构函数中保存和关闭文件，并撤销对象。 总结 文件流分为三种 文件输入流(ifstream), 文件输出流(ofstream),文件输入/输出流(fstream) 文件处理步骤 定义文件流对象 打开文件void open(const unsigned char *filename, int mode, int access=filebuf::openprot)； 关闭文件 调用成员函数close() 常用操作 sfile.unsetf(ios::skipws);//把跳过空格控制位置0,即不跳过空格,否则空格全部未复制 附录点击下载所有作业 建议研究13章（week9）、17章作业","tags":[{"name":"期末复习","slug":"期末复习","permalink":"http://www.zjdx1998.ml/tags/期末复习/"},{"name":"C++","slug":"C","permalink":"http://www.zjdx1998.ml/tags/C/"}]},{"title":"2018ACM-ICPC江苏邀请赛（徐州）参赛总结","date":"2018-06-03T15:10:19.000Z","path":"2018/06/03/18-6-icpcjsxz/","text":"校园环境图书馆 比赛体育馆外景: 比赛体育馆内景: 赛题A题 B题 C题 D题 E题 F题 G题 H题 I题 J题 K题 题解zkc题解 标程汇总 结果金牌队 lcl是SEU的红太阳 lcl领奖图 奖牌 最终榜单比赛官网小结四支队伍，一银一铜两铁，我们队卡了两题，如果后来我能及时意识到矩阵快速幂可能还能及时A掉I题，不会这么惨。 乱入的自拍","tags":[{"name":"ACM","slug":"ACM","permalink":"http://www.zjdx1998.ml/tags/ACM/"},{"name":"dp","slug":"dp","permalink":"http://www.zjdx1998.ml/tags/dp/"},{"name":"数学","slug":"数学","permalink":"http://www.zjdx1998.ml/tags/数学/"},{"name":"矩阵快速幂","slug":"矩阵快速幂","permalink":"http://www.zjdx1998.ml/tags/矩阵快速幂/"},{"name":"可持久化线段树","slug":"可持久化线段树","permalink":"http://www.zjdx1998.ml/tags/可持久化线段树/"}]},{"title":"5月下旬ACM训练记录","date":"2018-05-17T03:23:06.000Z","path":"2018/05/17/ACM-Training/","text":"题解在题目名链接的代码中查看 Codeforces 序号 题目名 所属比赛 算法 做出/补题 做题时间 1 A.Chess Placing ECF Round 44 模拟 √ 2018/5/21 2 B.Switches and Lamps ECF Round 44 模拟 √ 2018/5/21 3 C.Liebig's Barrels ECF Round 44 贪心 √ 2018/5/21 4 D.Sand Fortress ECF Round 44 二分 × √ 2018/5/23 5 E.Pencils and Boxes ECF Round 44 dp+树状数组 × √ 2018/5/24 6 F.Isomorphic Strings ECF Round 44 字符串Hash × √ 2018/5/24 7 ECF Round 44 × 2018/5/21 其他字符串Hash题目汇总 HDU关于BKDRHash的介绍较为详细的文章可以点击文章1 以及文章2 一个小tip是, bkdrhash最好return (h &amp; 0x7FFFFFFF)，如果模散列表，当长度小的时候容易造成冲突，可以采用开放地址或者拉链法解决。但是如果直接自然溢出，冲突数较小，这种方法似乎和map更搭。 序号 题目名 所属比赛 算法 做出/补题 做题时间 1 1880.魔咒词典 类题训练 字符串BKDRHash √ 2018/5/25 2 6287.口算训练 CCPC2018女生赛 数学 √ 2018/5/29 Hash冲突处理 ASL计算方法 POJ 序号 题目名 所属比赛 算法 做出/补题 做题时间 1 3274.Gold Balanced Lineup 类题训练 拉链法Hash √ 2018/5/29 ACM-ICPC徐州邀请赛详情见:徐州邀请赛总结","tags":[{"name":"ACM","slug":"ACM","permalink":"http://www.zjdx1998.ml/tags/ACM/"},{"name":"模拟","slug":"模拟","permalink":"http://www.zjdx1998.ml/tags/模拟/"},{"name":"贪心","slug":"贪心","permalink":"http://www.zjdx1998.ml/tags/贪心/"},{"name":"二分","slug":"二分","permalink":"http://www.zjdx1998.ml/tags/二分/"},{"name":"dp","slug":"dp","permalink":"http://www.zjdx1998.ml/tags/dp/"},{"name":"树状数组","slug":"树状数组","permalink":"http://www.zjdx1998.ml/tags/树状数组/"},{"name":"Hash","slug":"Hash","permalink":"http://www.zjdx1998.ml/tags/Hash/"},{"name":"字符串","slug":"字符串","permalink":"http://www.zjdx1998.ml/tags/字符串/"},{"name":"数学","slug":"数学","permalink":"http://www.zjdx1998.ml/tags/数学/"}]},{"title":"敲理妈，累死我了","date":"2018-05-05T18:07:35.418Z","path":"2018/05/06/hello-world/","text":"现在是北京时间2018年5月6日3.45分，时隔7年时间我终于用上自己的博客了… 不过这次是亲手一步步搭的，以后会不定期更新… 谢谢大家的支持！ 本博客的用处技术博客 生活随笔","tags":[]}]