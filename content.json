[{"title":"离散数学期末复习","date":"2018-06-05T02:57:16.000Z","path":"2018/06/05/discretemathfinalreview/","text":"","tags":[{"name":"期末复习","slug":"期末复习","permalink":"http://www.zjdx1998.ml/tags/期末复习/"},{"name":"离散数学","slug":"离散数学","permalink":"http://www.zjdx1998.ml/tags/离散数学/"}]},{"title":"大一下学期面向对象程序设计（1）期末复习","date":"2018-06-05T02:56:39.000Z","path":"2018/06/05/c-review/","text":"期末复习总览占比分布期末 70% 作业 20% 考勤 10% 笔试阅读程序 4题各5分 填空 2题各10分 5空 上机 3*20分 考试要点构造函数、析构函数拷贝构造函数什么时候使用？ 传值，返回值 例子(共调用3+2次) : add(cls x,cls y){ return x+y; } add(x,y) 常成员函数Composition函数初始化先对成员对象初始化,构造函数初始化列表 static操作符重载必须重载为全局函数 虚函数纯虚函数后加 = 0 栈展开对象释放 分章复习Chapter 9条件编译`#ifndef FILENAME_H` `#define FILENAME_H` `#endif` Sizeof只包括数据成员的大小 VC为了确保结构的大小为结构的字节边界数（即该结构中占用最大空间的类型所占用的字节数）的倍数，所以在为最后一个成员变量申请空间后，还会根据需要自动填充空缺的字节。 比较以下例子 class test1{ char c; } sizeof : 1 class test2{ char a,b,c,d,e; } sizeof : 5 class test3{ int num; char a; } sizeof : 8 class test4{ int num; char a,b,c,d,e; } sizeof : 12 class test5{ char a;int num;char b; } sizeof : 12 this指针每一个成员函数都有一个隐藏的指针类型形参：this &lt;类名&gt; *const this 通过对象调用成员函数时，编译程序会把对象地址作为隐含参数传递给形参this 访问this指向对象的成员时：this-&gt; (也可以省略不写) 接口与实现分离A.h A.cpp 编译-&gt; A.obj B.cpp 编译 B.obj A.obj B.obj 链接 -&gt; B.exe 软件供应商在他们的产品中只需提供头文件和类库(目标模块)，而不需提供源代码。 访问函数与工具函数 访问(access)函数,public,用来读取或显示数据,如setName,getName。如vector.empty() 工具(utility)函数,private,一般在public函数里面被使用。 构造函数与析构函数 缺省构造函数： 不带参数的构造函数 所有参数都有默认值的构造函数考虑以下例子为什么编译失败(缺省构造函数重载失败) 123456789101112class A&#123; int x, y;public: A(int x = 0,y = 0) x = x1; y = y1; &#125; A(int x1)&#123; x = x1; y = 0; &#125;&#125;; 只要类中提供了构造函数，即使没有提供缺省构造函数，编译程序将不再提供缺省构造函数。 析构函数 析构函数是一个特殊的成员函数，它的名字同类名，并在前面加“～”字符，用来与构造函数加以区别。析构函数不接收任何参数，也不可以指定返回类型。 一个类中只能定义一个析构函数，析构函数不能重载，且必须是公有的。 下面两种情况，析构函数将会被自动调用 如果一个对象被定义在一个函数体内，则当这个函数结束时，该对象的析构函数被自动调用； 当一个对象是使用new运算符被动态创建的，在使用delete运算符释放它时，delete将会自动调用析构函数 存储类别具体可以参考 全局对象：在任何函数(含main)执行前，构造；在程序结束时，析构. 局部对象：(栈区) 自动变量：对象定义时，构造；块结束时，析构. 静态变量：首次定义时，构造？；程序结束时，析构. 对象间调用构造函数和析构函数的顺序恰好相反. 全局和静态对象(均为静态存储类别)同理. 特例1：调用exit函数退出程序执行时，不调用剩余自动对象的析构函数. 特例2：调用abort函数退出程序执行时，不调用任何剩余对象的析构函数. 小陷阱:私有数据成员的引用考虑以下程序，是否出现类私有数据成员的引用情况？如何解决该问题？（加const，如何加？）1234567891011121314class A &#123;public: int &amp; setA() &#123; a = 1; return a; &#125;private: int a;&#125;;int main() &#123; A t; int&amp; r = t.setA(); return 0;&#125; 第三行变为 const int &amp; setA()即可。 赋值运算 By default, such assignment is performed by memberwise assignment(按成员赋值/逐个成员赋值). 拷贝构造函数在对还没存在的对象赋值时会调用；赋值函数在对已经存在的对象赋值会调用；赋值函数初始化前需要清理堆资源等，拷贝构造不需要。 注意点 有一种特别常见的情况需要自己定义复制控制函数：类具有指针函数。 赋值操作符和复制构造函数可以看成一个单元，当需要其中一个时，我们几乎也肯定需要另一个 三法则：如果类需要析构函数，则它也需要赋值操作符和复制构造函数 如果没定义复制构造函数（别的不管），编译器会自动生成默认复制构造函数 如果定义了其他构造函数（包括复制构造函数），编译器绝不会生成默认构造函数 即使自己写了析构函数，编译器也会自动生成默认析构函数 解决方案 自定义拷贝构造函数：按引用传递 小结 条件编译指令 访问成员函数的三种方式(句柄+操作符) 成员函数的作用域：class scope 访问函数和工具函数 带默认实参的构造函数 构造函数和析构函数被调用的顺序 破坏类的封装的一种做法：返回对私有数据成员的引用 利用一个对象初始化另一个对象(拷贝构造函数) Chapter 10常成员函数 要求 不能修改本对象的数据成员 不能调用本对象其它non-const成员函数 建议 所有不更改object成员的函数均声明为const成员函数 注意 成员函数是否为常成员函数，不仅取决于它不修改对象、不调用non-const成员函数，而且必须显式地声明为const！ 构造函数、析构函数不能声明为const 可以调用非const成员函数初始化const对象（为什么？） 对象的常量特性体现在初始化(构造)后、析构之前。 小结 可以定义const常量，具有不可变性； 便于进行类型检查，使编译器对处理内容有更多了解，消除了一些隐患； 可以避免意义模糊的数字出现，同样可以很方便地进行参数的调整和修改； 可以保护被修饰的东西，防止意外的修改，增强程序的健壮性； 提高了效率（编译器对常量进行优化） 构造函数初始化列表构造函数初始化列表必须使用的情况 注意：C++11支持const直接赋值。1234const data member (例外?const static integer)(注：普通const必须一开始初始化)reference data member 引用类型的数据成员member objects, 数据成员是其他类(未提供缺省构造函数)的对象*继承类的基类base class* 组合 成员对象的构造和析构顺序 成员对象的构造先于宿主对象； 成员对象按照类定义中的声明顺序构造 成员对象的析构后于宿主对象。 总结 若无缺省构造函数，则必须使用初始化列表（思考原因） 若有缺省构造函数，此时如果成员对象没有显式通过成员初始化列表中初始化，则自动隐含调用缺省构造函数(default constructor). 性能方面？（避免双重初始化） 构造函数与析构函数的调用顺序 类的成员对象（public or private） 把成员对象声明为public不会影响成员对象的封装性 友元函数与友元类 为什么使用友元 为什么要使用友元函数 两个类要共享数据的时候 运算符重载的某些场合需要使用友元 使用友元函数可提高性能 用友元函数可以访问两个或多个类的私有数据，较其它方法使人们更容易理解程序的逻辑关系 缺点:破环了类的封装机制 总结： 类的友元函数在类作用域之外定义，但可以访问类的私有和保护成员 尽管类定义中有友元函数原型，友元函数仍然不是成员函数 由于友元函数不是任何类的成员函数，所以不能用句柄(对象)加点操作符来调用 public, private, protected成员访问符与友员关系的声明无关，因此友元关系声明可在类定义的任何位置，习惯上在类定义的开始位置 友元关系是指定的，不是获取的，如果让类B成为类A的友元类，类A必须显式声明类B为自己的友元类 友元关系不满足对称性和传递性 如果一个友元函数想与两个或更多类成为友元关系，在每个类中都必须声明为友元函数 new运算符 为什么使用 直到运行时才能知道需要多少对象空间； 不知道对象的生存期到底有多长； 直到运行时才知道一个对象需要多少内存空间 使用方法 基本数据类型 double *ptr = new double(3.14); delete ptr 类对象 Cls *ptr = new Cls(); delete ptr; 数组 int *array = new int[size]; delete [] array; Cls *clsarray = new Cls[size]; delete [] clsarray; static 初始化 显式初始化 静态常量整数成员可在类定义中初始化（长整形/短整形/枚举） const static int i = 0; //ok 其它情况必须在类外部定义和初始化。 static int i = 0; //error const数组成员的初始化？* 声明为const static数组，并在外部初始化 未显示初始化 静态基本类型的数据成员缺省初始化为0 静态抽象数据类型(类对象)的数据成员默认调用缺省构造函数 静态成员的空间分配并不在类的构造函数中完成，也不会在类的析构函数里完成空间回收 访问 可直接通过类名+::访问 没有this指针（为什么？） static 成员函数独立于对象存在。而this指针必须指向类的具体的对象 不能加const（为什么？） const修饰符用于表示函数不能修改成员变量的值，该函数必须是含有this指针 可通过对象访问(public)，也可直接通过类名+::访问 不能访问非静态数据成员，也不能调用非静态成员函数 总结 常量对象和常成员函数 对象的组合 友元函数和友元类 this指针(隐含参数，作用：级联调用) 动态内存分配 静态类成员 Chapter 11运算符重载 定义方式: ClassName operator@([const ClassName&amp; A]) 调用方式: 普通函数 全局函数: 函数名(参数列表) 类成员函数: 对象.函数名(参数列表)等 重载的运算符 使用时以表达式形式出现: HugeIntA + HugeIntB 针对对象，三个不用重载的运算符： assignment operator (=) address operators (&amp;) comma operators (,) 限制 重载运算符应该仿效其相应的内置对象的功能 重载成的成员函数必须是非static的(带着问题思考) HugeInt operator+(const HugeInt&amp; a); 不能更改Precedence(优先级), Associativity(结合律) 以及 Number of Operands(操作数数目) 仅能重载现有运算符，不能创造新运算符 运算符函数运算符函数可以是成员函数或者全局函数 当重载为类的成员函数时 非静态的类成员函数 使用this指针隐性获取操作左值 左操作数(或唯一的操作数)必须为该类对象(或对象引用) 将自动包含该类对象(或其引用)作为操作数，函数参数个数等于运算符目数-1 当重载为全局函数时 形式class HugeInt { friend HugeInt operator+(const HugeInt &amp;, int); }; 函数参数个数等于运算符的目数 全局函数: 是否访问私有数据 Friend（可访问私有数据）复习~~~ Non-friend 思考：必须重载为全局函数的情况 左操作数必须为不同类型对象或一个基本类型对象 使运算符具有可交换性 HugeInteger + int 和 int + HugeInteger 成员函数+参数调换的全局函数 设计原则 ( ), [ ], -&gt;和赋值(=, +=, -=等)运算符 必须 重载为成员函数 >>, &lt;&lt;和需要支持交换律(Commutative)的运算符重载为全局函数 其余运算符可以选择重载为成员或全局函数 输入输出流运算符重载输出流重载 friend ostream &amp;operator&lt;&lt;(ostream&amp;, const cls &amp;)输入流重载 friend istream &amp;operator&gt;&gt;(istream&amp;) 一元运算符重载例子:1234567class String &#123;public: bool operator!( ) __const__;&#125;;class String &#123; friend bool operator!( __const__ String &amp;);&#125;; 二元运算符重载 带有一个参数的成员函数 前提条件是仅当左操作数是该函数所在类的对象 带有二个参数的全局函数 其中一个参数必须是对象或对象引用例子：1234567class String &#123;public: bool operator&lt;( const String &amp;) const;&#125;;class String &#123; friend bool operator&lt;( const String &amp;, const String &amp;);&#125;; 运算符重载小结 const Array &amp;operator=( const Array &amp; );为何返回值要加&amp;和const？ &amp;为了在a=(b=c)时提高性能 参数的&amp;为了防止自我复制 Const类型的返回值表示对相关对象的保护，实现禁左。禁止(a=b)=c 虚悬指针（产生原因）与指针回收问题 关于delete之后的指针使用（有的编译器可以访问，但会有潜在的错误） 通常会为任何一个使用动态分配内存的类同时提供一组函数（重要！）： 复制构造函数 析构函数 重载的赋值运算符函数 如何阻止类对象的复制 将重载的赋值运算符以及拷贝构造函数设置为private 类型转换 同类对象转换 ： 初始化对象,拷贝构造函数 非同类对象转换： 转换构造函数 重载强制类型转换运算符123456789101112函数声明形式 A::operator int() const; // 不需要返回值,不修改原对象 实现：A -&gt; int A::operator OtherClass() const; 实现：A-&gt; OtherClass用户调用： A s； static_cast&lt;int&gt;(s); static_cast&lt;OtherClass&gt;(s);编译器调用：s.operator int(); s.operator OtherClass(); 几个常用的cast dynamic_cast: 通常在基类和派生类之间转换时使用 const_cast: 主要针对const和volatile的转换. static_cast: 一般的转换 reinterpret_cast: 用于进行没有任何关联之间的转换，比如一个字符指针转换为一个整形数。 小结 转换构造函数 重载强制类型转换运算符 隐式调用原则： 先查找符合要求的函数 再调用转换运算 转换运算不能级联调用(仅能调用一次) 总结 哪些运算符可以重载？何时需要重载？有何限制？如何重载？ “.”,”.*”,”::”,”?:”不能重载 “=“,”&amp;”,”,”可以直接使用但有时也需要重载 成员函数 vs 全局函数 ( ), [ ], -&gt;和赋值(=, +=, -=等) 运算符必须重载为成员函数（有时函数需要被重载为常成员函数） 支持交换律的运算符必须重载为全局函数 拷贝构造函数和转换构造函数 自定义String类 vs 标准string类 Chapter 12is-a与has-a的区别 is-a代表继承 一个类继承自另一个类 属于更加专有的一类对象 可以一个类继承一些行为，也可修改甚至创建新的行为 例如vehicle类，有加速、减速等行为，car继承vehicle，同样有这些行为，也可以有新的行为（如打开后备箱等） has-a代表组合关系 一个对象包含其它的成员对象 例如Employee类中包含firstname、lastname、birthdate、hiredate等对象 继承 作用 软件复用； 对事物进行分类； 支持软件的增量开发； 对概念进行组合。 声明：class &lt;派生类名&gt;:&lt;继承方式&gt;&lt;基类名&gt; {……};（多继承在后面添加） 访问规则 派生类吸纳基类的数据成员及成员函数（隐性） 派生类的成员函数如何访问基类的数据成员和成员函数？(public继承) 可以访问基类中的非private数据成员及成员函数 无法直接访问基类的private成员 可以通过基类中提供的非private成员函数实现对基类中private数据成员进行修改 通常派生类需要重新定义一些成员函数，以实现派生类特有的功能及操作 继承中的访问模式 基类的public成员能够被程序中所有函数访问 基类的private成员只能被基类的成员函数和友元访问 基类的protected成员只能被基类的成员和友元以及派生类的成员和友元访问。 注意：不能被类的实例（对象）访问。 派生类如何访问基类的数据成员？ 默认情况：派生类成员简单地使用成员名就可以引用基类的public成员和protected成员。 当派生类重新定义了基类的成员函数时，访问方式： base-class name:: + 成员函数 只要在派生类中重写基类的函数（函数名相同，即使参数不同），就无法默认调用基类的相关函数，此时基类中的函数需要“基类::函数名”来调用。 派生类与基类的关系 初始化 如果派生类的构造函数没有显示调用基类的构造函数，C++将尝试隐式调用默认的构造函数（前提：基类需要有缺省的构造函数） 采用成员初始化器列表显示地初始化成员对象和调用基类的构造函数，可以防止重复初始化 头文件:在派生类头文件中使用#include包含基类头文件 告诉编译器基类的存在 让编译器根据类的定义确定对象的大小，派生类的对象大小取决于派生类显式定义的数据成员和继承自基类的数据成员 让编译器能够判断派生类是否正确的使用了基类的成员 注意事项 影响数据的有效性检查 派生类可以直接访问基类的protected数据成员 派生类依赖于基类的实现 基类的数据成员发生改变有可能影响派生类的实现 软件“易碎”或“脆弱”，不够健壮 基类仅向派生类提供服务，则可使用protected类型声明，其他情况慎用protected 在派生类中重定义基类成员 通过调用基类的public成员函数来访问基类的私有数据成员 当功能相同时，尽量调用成员函数，以避免代码拷贝。 重定义基类成员函数时，一定要使用“::”访问基类成员，否则会引起无限递归，例如：earnings() 注意print()和earnings()的重新定义：调用基类的print()和earnings()函数 符合软件工程要求：使用继承，通过调用成员函数隐藏了数据，保证了数据的一致性。 基类、派生类中的构造与析构函数 构造顺序 建立派生类的实例对象时、必须调用基类的构造函数来初始化派生类对象的继承成员。 派生类的构造函数既可以隐式调用基类的构造函数，也可以在派生类的构造函数中通过给基类提供初始化值显式地调用。 基类构造函数-&gt;派生类构造函数 析构顺序 析构函数的调用顺序和构造函数的顺序相反，因此派生类的析构函数在基类析构函数之前调用。 包含成员对象的情况，假设基类和派生类都包含其他类的对象： 在建立派生类的对象时，首先执行基类成员对象的构造函数，接着执行基类的构造函数，然后执行派生类的成员对象的构造函数，最后才执行派生类的构造函数。析构函数的调用次序与调用构造函数的次序相反。 基类成员对象初始化—&gt;基类的构造函数—&gt;派生类成员对象初始化—&gt;派生类构造函数 建立成员对象的顺序是对象在类定义中的声明顺序。成员初始化器中的顺序不影响建立对象的顺序。 继承小结 公有继承 基类成员对其对象的可见性：公有成员可见，其他不可见。这里保护成员同于私有成员。 基类成员对派生类的可见性：公有成员和保护成员可见，而私有成员不可见。这里保护成员同于公有成员。 基类成员对派生类对象的可见性：公有成员可见，其他成员不可见。一定要区分派生类的对象和派生类中的成员函数对基类的访问是不同的。 私有继承 基类成员对其对象的可见性：公有成员可见，其他成员不可见。（同前） 基类成员对派生类的可见性：公有成员和保护成员可见，私有成员不可见。（同前） 基类成员对派生类对象的可见性：所有成员都不可见。保护继承与私有继承类似 总结 不论公有继承还是私有继承，基类成员对于派生类的访问权限是不变的。（可访问公有或保护类型成员） 变化的是派生类的对象以及派生类的派生类对基类成员的访问权限。 基类和派生类的定义 Protected成员 基类和派生类的关系：public，proteced，private 继承关系中构造函数和析构函数顺序 复合(has-a)和继承(is-a)的关系 “使用”和”知道” Chapter 13面向对象三大要素数据封装 继承 多态 多态 解释1：同样的消息被类的不同对象接收时导致的完全不同的行为的一种现象。这里所说的消息即对类的成员函数的调用。 解释2：通过指向派生类的基类指针，调用派生类的函数; 将不同的派生类对象都当作基类来处理，并根据对象不同产生不同的行为，以屏蔽各派生类对象之间的差异。写出通用的代码，使得程序员可以方便地处理普遍性问题。 C++语言支持两种类型的多态： 编译时的多态(静态多态) ——函数重载 运行时的多态(动态多态) ——虚函数 多态性提高了软件的可扩展性，使得可以用与接收消息对象类型无关的方式编写 继承中的对象关系 Invoking Base-Class Functions from Derived-Class Objects（基类指针指向派生类，调用基类函数） 结论: 调用基类还是派生类的函数，取决于句柄的类型，而不是句柄指向的实际对象类型 Aiming Derived-Class Pointers at Base-Class Objects（派生类指针指向基类，错误） Derived-Class Member-Function Calls via Base-Class Pointers（基类指针指向派生类，调用派生类函数，错误） 结论: 通过对象句柄，仅能调用该句柄类型的成员函数 解决办法: downcasting(dynamic_cast) 虚函数 语法 调用哪个(基类/派生类)虚函数，由对象类型而不是句柄类型决定. 虚函数用于继承结构中的基类和派生类，以实现多态. 派生类中覆盖(Overridden)的虚函数和基类中的虚函数必须函数签名和返回值均相同. 包括函数名称、返回值、参数个数、类型、是否const都要一致 调用虚函数的两种方式 通过指向派生类的基类指针(或引用)调用，程序会在执行时(execution time)根据对象类型动态选择合适的派生类函数 – 动态绑定( dynamic binding )或延迟绑定( late binding ). 通过对象名和点操作符调用，程序在编译时(compile time)即根据对象类型确定函数– 静态绑定( static binding ). 只有通过引用或指针来访问对象的虚函数时才进行动态绑定。 通过引用或指针访问对象的非虚成员函数，采用静态绑定。（与句柄类型的成员函数代码绑定） 通过“类名+::”访问对象成员函数，也采用静态绑定。 基类构造函数中对虚函数的调用不采用动态绑定。 通过指针访问其他成员函数并调用虚函数时仍需动态绑定。 限制 只有类成员才能声明为虚函数 静态成员函数不能是虚函数 构造函数不能是虚函数 析构函数可以是虚函数，并且通常声明为虚函数(注意基类和派生类的析构函数不同名)例： 12commissionEmployeePtr = &amp;basePlusCommissionEmployeedelete commissionEmployeePtr; 调用的是basePlusCommissionEmployee的析构函数 纯虚函数与抽象类 语法 : virtual void function() const = 0; Abstract Class(抽象类): 包含一个或者多个纯虚函数的类。无法实例化(但可以声明指针和引用)，只能用于继承。Shape obj; // Error Rectangle objRectangle; Shape *ptr = &amp;objRectangle; // OK Shape &amp;ref = objRectangle; // OK 作用：为派生类提供一个基本框架或公共接口。 Concrete Class(具体类): 不包含纯虚函数，可以实例化。 总结 成员函数是否声明为虚函数，取决于是否需要多态性支持 虚函数是否声明为纯虚函数，取决于该函数对于当前类是否有意义，以及当前类是否需要实例化","tags":[{"name":"期末复习","slug":"期末复习","permalink":"http://www.zjdx1998.ml/tags/期末复习/"},{"name":"C++","slug":"C","permalink":"http://www.zjdx1998.ml/tags/C/"}]},{"title":"2018ACM-ICPC江苏邀请赛（徐州）参赛总结","date":"2018-06-03T15:10:19.000Z","path":"2018/06/03/18-6-icpcjsxz/","text":"校园环境图书馆 比赛体育馆外景: 比赛体育馆内景: 赛题A题 B题 C题 D题 E题 F题 G题 H题 I题 J题 K题 题解zkc题解 标程汇总 结果金牌队 lcl是SEU的红太阳 lcl领奖图 奖牌 最终榜单比赛官网小结四支队伍，一银一铜两铁，我们队卡了两题，如果后来我能及时意识到矩阵快速幂可能还能及时A掉I题，不会这么惨。 乱入的自拍","tags":[{"name":"ACM","slug":"ACM","permalink":"http://www.zjdx1998.ml/tags/ACM/"},{"name":"数学","slug":"数学","permalink":"http://www.zjdx1998.ml/tags/数学/"},{"name":"矩阵快速幂","slug":"矩阵快速幂","permalink":"http://www.zjdx1998.ml/tags/矩阵快速幂/"},{"name":"可持久化线段树","slug":"可持久化线段树","permalink":"http://www.zjdx1998.ml/tags/可持久化线段树/"},{"name":"dp","slug":"dp","permalink":"http://www.zjdx1998.ml/tags/dp/"}]},{"title":"5月下旬ACM训练记录","date":"2018-05-17T03:23:06.000Z","path":"2018/05/17/ACM-Training/","text":"题解在题目名链接的代码中查看 Codeforces 序号 题目名 所属比赛 算法 做出/补题 做题时间 1 A.Chess Placing ECF Round 44 模拟 √ 2018/5/21 2 B.Switches and Lamps ECF Round 44 模拟 √ 2018/5/21 3 C.Liebig's Barrels ECF Round 44 贪心 √ 2018/5/21 4 D.Sand Fortress ECF Round 44 二分 × √ 2018/5/23 5 E.Pencils and Boxes ECF Round 44 dp+树状数组 × √ 2018/5/24 6 F.Isomorphic Strings ECF Round 44 字符串Hash × √ 2018/5/24 7 ECF Round 44 × 2018/5/21 其他字符串Hash题目汇总 HDU关于BKDRHash的介绍较为详细的文章可以点击文章1 以及文章2 一个小tip是, bkdrhash最好return (h &amp; 0x7FFFFFFF)，如果模散列表，当长度小的时候容易造成冲突，可以采用开放地址或者拉链法解决。但是如果直接自然溢出，冲突数较小，这种方法似乎和map更搭。 序号 题目名 所属比赛 算法 做出/补题 做题时间 1 1880.魔咒词典 类题训练 字符串BKDRHash √ 2018/5/25 2 6287.口算训练 CCPC2018女生赛 数学 √ 2018/5/29 Hash冲突处理 ASL计算方法 POJ 序号 题目名 所属比赛 算法 做出/补题 做题时间 1 3274.Gold Balanced Lineup 类题训练 拉链法Hash √ 2018/5/29 ACM-ICPC徐州邀请赛详情见:徐州邀请赛总结","tags":[{"name":"ACM","slug":"ACM","permalink":"http://www.zjdx1998.ml/tags/ACM/"},{"name":"数学","slug":"数学","permalink":"http://www.zjdx1998.ml/tags/数学/"},{"name":"dp","slug":"dp","permalink":"http://www.zjdx1998.ml/tags/dp/"},{"name":"模拟","slug":"模拟","permalink":"http://www.zjdx1998.ml/tags/模拟/"},{"name":"贪心","slug":"贪心","permalink":"http://www.zjdx1998.ml/tags/贪心/"},{"name":"二分","slug":"二分","permalink":"http://www.zjdx1998.ml/tags/二分/"},{"name":"树状数组","slug":"树状数组","permalink":"http://www.zjdx1998.ml/tags/树状数组/"},{"name":"Hash","slug":"Hash","permalink":"http://www.zjdx1998.ml/tags/Hash/"},{"name":"字符串","slug":"字符串","permalink":"http://www.zjdx1998.ml/tags/字符串/"}]},{"title":"敲理妈，累死我了","date":"2018-05-05T18:07:35.418Z","path":"2018/05/06/hello-world/","text":"现在是北京时间2018年5月6日3.45分，时隔7年时间我终于用上自己的博客了… 不过这次是亲手一步步搭的，以后会不定期更新… 谢谢大家的支持！ 本博客的用处技术博客 生活随笔","tags":[]}]